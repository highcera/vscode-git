temp = df1_des.iloc[8].to_list()
volt = df1_des.iloc[9].to_list()
quantity = df1_des.iloc[7].to_list()
time = df1_des.iloc[10].to_list()

test_temp ['125', '135', '145']
test_volt ['12.0', '14.0', '16.0', '18.0']
test_quantity = list(set(quantity))
max_quantity = max(test_quantity)
test_time = time

    12.0 14.0 16.0 18.0
125    V    V    V    V
135    V    V    V    V
145    V    V    V    V

temp_comb = list(combinations(list(range(len(test_temp))), 2))
[(0, 1), (0, 2), (1, 2)]
test_temp[temp_comb[i][0]], test_temp[temp_comb[i][1]]
125 135
125 145
135 145

volt_comb = list(combinations(list(range(len(test_volt))), 2))
[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]
print(test_volt[volt_comb[i][0]], test_volt[volt_comb[i][1]])
12.0 14.0
12.0 16.0
12.0 18.0
14.0 16.0
14.0 18.0
16.0 18.0

unit_comb = list(product(temp_comb,volt_comb))
[((0, 1), (0, 1)), ((0, 1), (0, 2)), ((0, 1), (0, 3)), ((0, 1), (1, 2)), ((0, 1), (1, 3)), ((0, 1), (2, 3)), ((0, 2), (0, 1)), ((0, 2), (0, 2)), ((0, 2), (0, 3)), ((0, 2), (1, 2)), ((0, 2), (1, 3)), ((0, 2), (2, 3)), ((1, 2), (0, 1)), ((1, 2), (0, 2)), ((1, 2), (0, 3)), ((1, 2), (1, 2)), ((1, 2), (1, 3)), ((1, 2), (2, 3))]

for i in range(len(unit_comb)):
    print(unit_comb[i][0], unit_comb[i][1]) 

(0, 1) (0, 1)
(0, 1) (0, 2)
(0, 1) (0, 3)
(0, 1) (1, 2)
(0, 1) (1, 3)
(0, 1) (2, 3)
(0, 2) (0, 1)
(0, 2) (0, 2)
(0, 2) (0, 3)
(0, 2) (1, 2)
(0, 2) (1, 3)
(0, 2) (2, 3)
(1, 2) (0, 1)
(1, 2) (0, 2)
(1, 2) (0, 3)
(1, 2) (1, 2)
(1, 2) (1, 3)
(1, 2) (2, 3)

for i in range(len(unit_comb)):
      print(test_temp[unit_comb[i][0][0]], '-', test_temp[unit_comb[i][0][1]], ' / ', test_volt[unit_comb[i][1][0]], '-', test_volt[unit_comb[i][1][1]])
temp_unitset    /    volt_unitset
125 - 135  /  12.0 - 14.0
125 - 135  /  12.0 - 16.0
125 - 135  /  12.0 - 18.0
125 - 135  /  14.0 - 16.0
125 - 135  /  14.0 - 18.0
125 - 135  /  16.0 - 18.0
125 - 145  /  12.0 - 14.0
125 - 145  /  12.0 - 16.0
125 - 145  /  12.0 - 18.0
125 - 145  /  14.0 - 16.0
125 - 145  /  14.0 - 18.0
125 - 145  /  16.0 - 18.0
135 - 145  /  12.0 - 14.0
135 - 145  /  12.0 - 16.0
135 - 145  /  12.0 - 18.0
135 - 145  /  14.0 - 16.0
135 - 145  /  14.0 - 18.0
135 - 145  /  16.0 - 18.0

comb_3_cond = np.zeros((72, 3, 40))
ret = np.zeros((18, 4, 3, 2))
â€‹
data_array= np.zeros((i, j, k))
count=0
for x in range(len(test_temp)):
    for y in range(len(test_volt)):
        data_array[x][y] = df1_data.loc[0:39, count]
        data_array[x][y] = sorted(data_array[x][y])
        count += 1   

ret
[((0, 0), (0, 1), (1, 0)), ((0, 0), (0, 1), (1, 1)), ((0, 0), (1, 0), (1, 1)), ((0, 1), (1, 0), (1, 1))]
[((0, 0), (0, 2), (1, 0)), ((0, 0), (0, 2), (1, 2)), ((0, 0), (1, 0), (1, 2)), ((0, 2), (1, 0), (1, 2))]
[((0, 0), (0, 3), (1, 0)), ((0, 0), (0, 3), (1, 3)), ((0, 0), (1, 0), (1, 3)), ((0, 3), (1, 0), (1, 3))]
[((0, 1), (0, 2), (1, 1)), ((0, 1), (0, 2), (1, 2)), ((0, 1), (1, 1), (1, 2)), ((0, 2), (1, 1), (1, 2))]
[((0, 1), (0, 3), (1, 1)), ((0, 1), (0, 3), (1, 3)), ((0, 1), (1, 1), (1, 3)), ((0, 3), (1, 1), (1, 3))]
[((0, 2), (0, 3), (1, 2)), ((0, 2), (0, 3), (1, 3)), ((0, 2), (1, 2), (1, 3)), ((0, 3), (1, 2), (1, 3))]
[((0, 0), (0, 1), (2, 0)), ((0, 0), (0, 1), (2, 1)), ((0, 0), (2, 0), (2, 1)), ((0, 1), (2, 0), (2, 1))]
[((0, 0), (0, 2), (2, 0)), ((0, 0), (0, 2), (2, 2)), ((0, 0), (2, 0), (2, 2)), ((0, 2), (2, 0), (2, 2))]
[((0, 0), (0, 3), (2, 0)), ((0, 0), (0, 3), (2, 3)), ((0, 0), (2, 0), (2, 3)), ((0, 3), (2, 0), (2, 3))]
[((0, 1), (0, 2), (2, 1)), ((0, 1), (0, 2), (2, 2)), ((0, 1), (2, 1), (2, 2)), ((0, 2), (2, 1), (2, 2))]
[((0, 1), (0, 3), (2, 1)), ((0, 1), (0, 3), (2, 3)), ((0, 1), (2, 1), (2, 3)), ((0, 3), (2, 1), (2, 3))]
[((0, 2), (0, 3), (2, 2)), ((0, 2), (0, 3), (2, 3)), ((0, 2), (2, 2), (2, 3)), ((0, 3), (2, 2), (2, 3))]
[((1, 0), (1, 1), (2, 0)), ((1, 0), (1, 1), (2, 1)), ((1, 0), (2, 0), (2, 1)), ((1, 1), (2, 0), (2, 1))]
[((1, 0), (1, 2), (2, 0)), ((1, 0), (1, 2), (2, 2)), ((1, 0), (2, 0), (2, 2)), ((1, 2), (2, 0), (2, 2))]
[((1, 0), (1, 3), (2, 0)), ((1, 0), (1, 3), (2, 3)), ((1, 0), (2, 0), (2, 3)), ((1, 3), (2, 0), (2, 3))]
[((1, 1), (1, 2), (2, 1)), ((1, 1), (1, 2), (2, 2)), ((1, 1), (2, 1), (2, 2)), ((1, 2), (2, 1), (2, 2))]
[((1, 1), (1, 3), (2, 1)), ((1, 1), (1, 3), (2, 3)), ((1, 1), (2, 1), (2, 3)), ((1, 3), (2, 1), (2, 3))]
[((1, 2), (1, 3), (2, 2)), ((1, 2), (1, 3), (2, 3)), ((1, 2), (2, 2), (2, 3)), ((1, 3), (2, 2), (2, 3))]

output_array = np.zeros((18, 4, 3, 40))

for i in range(0,18):
    for j in range(0,4):
        for k in range(0,3):
            #comb_data = data_array[final_comb[i][j][k][0]][final_comb[i][j][k][1]]
            output_array[i][j][k] = data_array[int(ret[i][j][k][0])][int(ret[i][j][k][1])]
            #print(comb_data)

reduction = np.reshape(output_array, (72, 3, -1))

for i in range(0, 72):
    for j in range(0, 3):
        print(reduction[i][j])