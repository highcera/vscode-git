package.json

{
  "name": "node-study",
  "version": "1.0.0",
  "description": "class101 웹 개발자 사관학교",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "highcera",
  "license": "ISC",
  "dependencies": {
    "axios": "^1.11.0",
    "cheerio": "^1.0.0-rc.12",
    "ejs": "^3.1.5",
    "express": "^4.17.1",
    "helmet": "^4.2.0",
    "helmet-csp": "^3.3.1",
    "iconv-lite": "^0.6.3",
    "json2xls": "^0.1.2",
    "mysql2": "^2.2.5",
    "sequelize": "^5.22.3",
    "supervisor": "^0.12.0"
  }
}

===========================================================================================

CH 4. 영화리뷰 사이트로 백엔드 실전 연습하기
5. 백엔드 총 정리!

[강의 요약]
﻿최종적으로 직접 만든 API를 화면과 연결합니다. == 즉, 프론트와 백엔드를 연결합니다. == 즉, 여러분은 풀스택 개발자가 된겁니다.
fullStack 개발자라고 해서 거창한게 아닌, 화면과 기능을 직접 모두 구현할 수 있다면 풀스택 개발자입니다. 이렇게 한 웹 사이트를 직접 프론트와 백엔드까지 구현할 수 있게 되었습니다.
전체적인 웹 서비스의 그림을 이랬습니다. 직접 모두다 만들고 나면 웹 개발자, 웹 풀스택, 프론트, 백엔드 개발자란 타이틀이 어렵지 않게 다가옵니다.
그럼 마지막으로 함께 만든 API을 프론트에 붙여보도록 합시다.
기존 개발자 사관학교에서 제공했던 API를 이용할 땐, 주소의 full url을 작성했습니다. 해당 API는 외부에서 제공해주는 API이므로 집주소의 모든 정보를 적어야 요청이 가능했죠.
하지만 지금은 집안에 웹 서버가 존재하게 되었습니다. 마치 옆방에 있는 동생을 불러 불좀 꺼달라는 식의 명령이라 생각해야합니다. 따라서 full url이 아닌 localhost 부분 즉, 방 주소만 적으면 됩니다.
리뷰 작성 ajax url 부분에 '/review/create'라 넣습니다. 즉 http://localhost:3000 부분이 없어도, 지금 우린 같은 집 == 서버에서 그림파일도 보여주고 데이터도 주고 받고 하고 있기 때문에 모두다 알고 있게 됩니다. /review/create란 주소가 어디에 있는 주소를 뜻하는지 말이죠!
그렇다면, 3교시때 더 자세히 다루겠지만, 여러분들이 만든 API를 다른 동료가 쓰려면 어떻게 해야할까요? 다른 사람들도 여러분 집주소를 알 수 있게끔 임대 주택, 즉 임대 서버에 여러분 웹서버를 올리고 공인 IP를 받은 뒤 다음과 같이 API를 제공해줘야 합니다. http://52.132.123.23/review/create
감이 오시나요? 그럼 리뷰 조희 API 또한 ajax 부분읜 url을 "/review/read" 바꿔주고 동일하게 API를 요청해봅니다.


CH 5. Node.js로 크롤링과 엑셀 업무 자동화를 직접!
2. 네이버 증권 화면을 HTML로 변환! Cheerio 사용법

npm install cheerio axios iconv-lite

router.get("/crawling", function(req,res){
 axios({url:url, method:"GET", responseType:"arraybuffer"}).then(function(html){
  const content = iconv.decode(html.data, "EUC-KR").toString()
  const $ = cheerio.load(content)

  const h3 = $(".sub_tlt")
  console.log(h3.text())

  res.send({success:200})
 })
})

[최종 코드]
https://github.com/glenncy/node-study

router.get("/crawling", function(req,res){

    axios({url:url,method:"GET",responseType:"arraybuffer"}).then(function(html){
        const content = iconv.decode(html.data,"EUC-KR").toString()
        const $ = cheerio.load(content)

        const table = $(".type_5 tr td")
        table.each(function(i,tag){
            console.log($(tag).text().trim())
        })
        
        res.send({success:200})
    })
})

router.get("/crawling", function(req, res){
    axios({url:url,method:"GET",responseType:"arraybuffer"}).then(function(html){
        const content = iconv.decode(html.data,"EUC-KR").toString()
        const $ = cheerio.load(content)
        const h3 = $(".sub_tit")
        console.log(h3.text())

        res.send({success:200})
    })         
})

4. 엑셀 파일을 JSON 데이터로 바꾸기
[강의 요약]
ajax를 사용하기 위한 Jquery 라이브러리 준비!
https://code.jquery.com/jquery-3.4.1.min.js
엑셀을 다루기 위한 도구!
https://github.com/SheetJS/sheetjs (Sheetjs 사이트)
https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.14.3/xlsx.full.min.js

[최종 코드]
https://github.com/glenncy/node-study

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <p>
    엑셀 업로드 :<input type="file" id="excelFile" onchange="excelExport(event)"/>
  </p>
  <script src="<https://code.jquery.com/jquery-3.4.1.min.js>"></script>
  <script src="<https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.14.3/xlsx.full.min.js>"></script>

  <script>
    function excelExport(event){
      var input = event.target;
      var reader = new FileReader();

      reader.onload = function(){
        var fileData = reader.result;
        var wb = XLSX.read(fileData, {type : 'binary'});

        wb.SheetNames.forEach(function(sheetName){
          var rowObj =XLSX.utils.sheet_to_json(wb.Sheets[sheetName]);
          console.log(JSON.stringify(rowObj));
        })
      };
      reader.readAsBinaryString(input.files[0]);
    }
    </script>
</body>
</html>


5. 엑셀파일 읽어서 원하는 결과값만 추려 엑셀파일 만들기
[강의 요약]
Node.js에서 규칙을 만들었던 미들웨어 기능을 이용하여 엑셀 파일을 응답으로 줄 수 있는 res.xls를 사용!
미들웨어, 즉 규칙은 항상 app.js에서 생성한다는 것 기억하세요!
https://www.npmjs.com/package/json2xls

npm install json2xls

[최종 코드]
https://github.com/glenncy/node-study

//app.js
const json2xls = require('json2xls');
app.use(json2xls.middleware);

//mainRouter.js
router.get("/excel/down", function(req,res){
  let excel_data = [{"A":1,"B":2,"C":3,"D":4}]
  res.xls('data.xlsx', excel_data);
})


6. Node.js로 손쉽게 만들 수 있는 유용한 기능들
[강의 요약]
정해진 시간에 작업을! 스케쥴러
https://www.npmjs.com/package/node-schedule

nodejs에서 이메일을 보내기!
https://www.npmjs.com/package/nodemailer

html 화면을 pdf로 만들고 내려받기
https://www.npmjs.com/package/html-pdf

html 화면을 이미지파일로 만들어서 내려받기(보정까지)
https://www.npmjs.com/package/html2canvas

이미지를 크롭하기!
https://www.npmjs.com/package/cropperjs

TOP1000 npm모듈
https://gist.github.com/anvaka/8e8fa57c7ee1350e3491
