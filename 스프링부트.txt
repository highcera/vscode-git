초보자를 위한 주식&코인 게만아 자동매매 컨텐츠 공부 및 활용 가이드
https://blog.naver.com/zacra/223086628069

쉿! 몰래 들어오세요! 주식, 코인 자동매매를 위한 기본 세팅 무료 대 공개!
https://blog.naver.com/zacra/222845081508


퇴근이 빨라지는 디자이너추천무료 사이트1
https://bbovelyboo.tistory.com/entry/%ED%87%B4%EA%B7%BC%EC%9D%B4-%EB%B9%A8%EB%9D%BC%EC%A7%80%EB%8A%94-%EB%94%94%EC%9E%90%EC%9D%B4%EB%84%88-%EC%B6%94%EC%B2%9C-%EB%AC%B4%EB%A3%8C-%EC%82%AC%EC%9D%B4%ED%8A%B8-1


퇴근이 빨라지는 디자이너추천무료 사이트2
https://bbovelyboo.tistory.com/entry/%ED%87%B4%EA%B7%BC%EC%9D%B4-%EB%B9%A8%EB%9D%BC%EC%A7%80%EB%8A%94-%EB%94%94%EC%9E%90%EC%9D%B4%EB%84%88-%EC%B6%94%EC%B2%9C-%EB%AC%B4%EB%A3%8C-%EC%82%AC%EC%9D%B4%ED%8A%B8-2


Unsplash
https://unsplash.com/ko

pixabay
https://pixabay.com/ko/

Foodiesfeed
https://www.foodiesfeed.com/

Gratisography
https://gratisography.com/

MorgueFile
https://morguefile.com/




Java Spring Boot (스프링부트) 프레임워크 제대로 배우기 Part.1

1차시 강의개요
2차시 선수학습 및 각 파트별 구성과 섹션 안내
3차시 스프링부트 학습을 위한 필요한 프로그램
4차시 STS 개발 툴 설치 후 기본설정 변경 및 체크하기
5차시 STS 개발 툴 설치 후 기본설정 변경 및 체크하기 - 실습
6차시 STS 기본설정 - 패키지 프리젠테이션 변경(1)
7차시 STS 기본설정 - 패키지 프리젠테이션 변경(2)
8차시 스프링부트 프로젝트 생성
9차시 스프링부트 프로젝트 생성한거 STS 개발툴에 임포트하기
10차시 스프링부트 프로젝트 생성 - 실습
11차시 스프링부트 프로젝트 디렉토리 구조와 폴더 및 파일 역할
12차시 스프링부트 Controller 역할과 이해(1)
13차시 스프링부트 Controller 역할과 이해(2) 및 폰트 사이즈 변경
14차시 스프링부트 Controller 역할과 이해(3) - templates 의존성 추가
15차시 스프링부트 Controller 역할과 이해(4) - templates 의존성 추가 - 실습
16차시 스프링부트 Controller 역할과 이해(5) - controller 역할
17차시 스프링부트 Controller 역할과 이해(6) - controller 실습
18차시 스프링부트 MVC 패턴
19차시 스프링부트 HTTP 단순 요청 및 모델 데이터 전달 실습
20차시 HTML 파일과 Template 파일의 차이 - 정적 vs 동적
21차시 타임리프 문법 적용시 기본 텍스트값이 있는 경우와 없는 경우의 차이
22차시 스프링부트를 사용해 파라미터 값을 전달 받는 방법
23차시 단일 파라미터 값을 전달 받는 RequestParam
24차시 여러 개의 파라미터 값을 전달 받는 RequestParam
25차시 Get 방식과 Post 방식의 차이와 스프링부트에서의 처리 방식
26차시 Post 방식의 요청시 스프링부트에서의 처리 방식 - PostMapping(1)
27차시 Post 방식의 요청시 스프링부트에서의 처리 방식 - PostMapping(2)
28차시 Post 방식의 요청시 스프링부트에서의 처리 방식 - PostMapping(3) - RequestBody
29차시 스프링부트 DTO 객체 전달 - 이론
30차시 스프링부트 DTO 객체 전달 - 실습(1)
31차시 스프링부트 DTO 객체 전달 - 실습(2)
32차시 스프링부트 객체 전달 - Form과 View를 template 폴더내에서 처리
33차시 스프링부트 객체 전달 - Form에서 타임리프 문법 사용하기(1)
34차시 스프링부트 객체 전달 - Form에서 타임리프 문법 사용하기(2)
35차시 스프링부트 객체 전달 - Form에서 타임리프 문법 사용하기(3)
36차시 DTO 객체와 타임리프를 이용한 뷰페이지 반복 출력(1)
37차시 DTO 객체와 타임리프를 이용한 뷰페이지 반복 출력(2)
38차시 DTO 객체와 타임리프를 이용한 뷰페이지 반복 출력(3) - css1
39차시 DTO 객체와 타임리프를 이용한 뷰페이지 반복 출력(4) - css2
40차시 DTO 객체와 타임리프를 이용한 뷰페이지 반복 출력(5) - nth-child 실습1
41차시 DTO 객체와 타임리프를 이용한 뷰페이지 반복 출력(6) - nth-child 실습2
42차시 스프링부트 시작시 경고 에러 해결 - spring.jpa.open-in-view


Java Spring Boot (스프링부트) 프레임워크 제대로 배우기 Part.2

1차시 스프링부트 DB 연동에 대해서(1)
2차시 스프링부트 DB 연동에 대해서(2)
3차시 스프링부트 DB 연동 기술용어와 개념이해(1) - Connection
4차시 스프링부트 DB 연동 기술용어와 개념이해(2) - DBCP
5차시 스프링부트 DB 연동 기술용어와 개념이해(3) - DataSource HikariCP
6차시 스프링부트 DB 연동 기술용어와 개념이해(4) - MyBatis
7차시 스프링부트 DB 연동 기술용어와 개념이해(5) - MyBatis 영속성과 장단점 ORM과 비교
8차시 스프링부트 DB 연동 기술용어와 개념이해(6) - MyBatis SpringBoot 결합 모듈
9차시 스프링부트 DB 연동 기술용어와 개념이해(7) - MyBatis 동작과 주요 컴포넌트 역할
10차시 스프링부트 DB 연동 기술용어와 개념이해(8) - 정리
11차시 MySQL 설치 및 환경설정(1)
12차시 MySQL CHARSET utf8 vs utf8mb4 차이점
13차시 MySQL root 비밀번호 변경하는 방법
14차시 MySQL 데이터베이스 및 테이블 생성
15차시 MySQL 데이터베이스 및 테이블 생성 - 실습
16차시 MySQL 데이터베이스 및 테이블 생성 - 실습 - root 패스워드 변경
17차시 MySQL 데이터베이스 기본 쿼리문 실습
18차시 데이터베이스 연동 실습(1) - 프로젝트 생성


19차시 데이터베이스 연동 실습(2) - New Datasource
20차시 데이터베이스 연동 실습(3) - 필요한 폴더 및 파일구성(이론)
21차시 데이터베이스 연동 실습(4) - 필요한 폴더 및 파일구성(실습)
22차시 데이터베이스 연동 실습(5) - MemberDTO 생성과 IoC 컨테이너 개념
23차시 데이터베이스 연동 실습(6) - DBConfiguration
24차시 데이터베이스 연동 실습(7) - HikariCP
25차시 데이터베이스 연동 실습(8) - MyBatis1
26차시 데이터베이스 연동 실습(9) - MyBatis2
27차시 데이터베이스 연동 실습(10) - MyBatis3
28차시 데이터베이스 연동 실습(11) - MemberMapper 인터페이스
29차시 데이터베이스 연동 실습(12) - MemberMapper SQL 쿼리문
30차시 데이터베이스 연동 실습(13) - MapperTests
31차시 데이터베이스 연동 실습(14) - 최종 테스트


Java Spring Boot (스프링부트) 프레임워크 제대로 배우기 Part.3

1차시 강의개요
2차시 DB 연동 후 해야할 것들
3차시 스프링 부트 프레임워크 각 계층(1)
4차시 스프링 부트 프레임워크 각 계층(2)
5차시 스프링 부트 프레임워크 각 계층(3) - Data Access Layer
6차시 스프링 부트 프레임워크 각 계층(4) - Domain
7차시 스프링 부트 프레임워크 각 계층(5) - DTO, DAO
8차시 Service Layer(서비스 계층) 만들기(1) - 메인과 멤버 폼페이지
9차시 Service Layer(서비스 계층) 만들기(2) - 메인과 멤버 폼페이지와 에러 대처
10차시 Service Layer(서비스 계층) 만들기(3) - Form 화면
11차시 Service Layer(서비스 계층) 만들기(3) - Form 정보 DB 입력
12차시 Service Layer(서비스 계층) 만들기(4) - 서비스단 구현
13차시 MemberDTO 수정 처리(1)
14차시 MemberDTO 수정 처리(2)
15차시 MemberDTO 수정 처리(3)
16차시 MemberDTO 수정 처리(4)
17차시 DB에서 가져온 회원 정보가 없을 경우에 대한 처리(1)
18차시 DB에서 가져온 회원 정보가 없을 경우에 대한 처리(2)
19차시 뷰 페이지 에러 처리 및 errorMessage 파일 범용적으로 사용하기
20차시 뷰 페이지 Form 수정 및 타임리프 if 구문 정리(1)
21차시 뷰 페이지 Form 수정 및 타임리프 if 구문 정리(2)
22차시 뷰 페이지 Form 수정 및 타임리프 if 구문 정리(3)
23차시 수정 처리를 위한 DB 연동 작업(1)
24차시 수정 처리를 위한 DB 연동 작업(2) - 수정 시 생각해봐야 하는 것 3가지
25차시 수정 처리를 위한 DB 연동 작업(3) - DB 수정 처리
26차시 수정 처리를 위한 DB 연동 작업(4) - DB 에러 처리
27차시 수정 처리를 위한 DB 연동 작업(5) - messageAlert 후 이동시키기1
28차시 수정 처리를 위한 DB 연동 작업(6) - messageAlert 후 이동시키기2
29차시 Form 디자인(1)
30차시 Form 디자인(2) - 실습1
31차시 Form 디자인(3) - 실습2
32차시 Form 디자인 Thymeleaf 적용하여 DB연동 완료하기
33차시 리스트 페이지 만들기(1)
34차시 리스트 페이지 만들기(2)
35차시 리스트 페이지 만들기(3) - 뷰페이지 만들기
36차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(1)
37차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(2)
38차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(3)
39차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(4)
40차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(5)
41차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(6)


Java Spring Boot (스프링부트) 프레임워크 제대로 배우기 Part.4

1차시 Bootstrap 버튼 관련 추가적인 디자인 클래스(1)
2차시 Bootstrap 버튼 관련 추가적인 디자인 클래스(2)
3차시 Bootstrap 버튼 관련 추가적인 디자인 클래스(3)
4차시 리스트 페이지 뷰 DB 연동하여 구현 완성(1)
5차시 리스트 페이지 뷰 DB 연동하여 구현 완성(2)
6차시 리스트 페이지 뷰 DB 연동하여 구현 완성(3) - 수정
7차시 리스트 페이지 뷰 DB 연동하여 구현 완성(4) - 삭제
8차시 fluid 적용 및 삭제 처리 DB연동 구현 이론
9차시 삭제 처리 DB연동 구현 실습(1)
10차시 삭제 처리 DB연동 구현 실습(2)
11차시 삭제 처리 DB연동 구현 실습(3)
12차시 전체 테스트 및 중복 삭제 리턴값 체크와 autocomplete 옵션 값 넣기
13차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기 - 기초개념
14차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기(1)
15차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기(2)
16차시 메타 태그와 viewport 주요 속성들 알아보기
17차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기(3)
18차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기(4)
19차시 템플릿 파일 요청시 파라미터 값 넘기기
20차시 템플릿 파일 요청시 파라미터 값 넘기기
21차시 최상단 네비게이션 탑메뉴 구현 및 선택된 메뉴 클래스 적용하기(1)
22차시 최상단 네비게이션 탑메뉴 구현 및 선택된 메뉴 클래스 적용하기(2)
23차시 최상단 네비게이션 탑메뉴 구현 및 선택된 메뉴 클래스 적용하기(3)
24차시 최상단 네비게이션 탑메뉴 구현 및 선택된 메뉴 클래스 적용하기(4)
25차시 최상단 네비게이션 탑메뉴에 classappend 적용하기
26차시 Dialect을 이용한 Thymeleaf Layout 만들기(1)
27차시 Dialect을 이용한 Thymeleaf Layout 만들기(2)
28차시 Dialect을 이용한 Thymeleaf Layout 만들기(3)
29차시 Layout Decorator 경고 나오는거 수정하기

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

스프링부트 + hikari + Mybatis

https://devhc.tistory.com/2
https://gongbu-ing.tistory.com/103

package hello.test.config;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import javax.sql.DataSource;

@Configuration
@PropertySource("classpath:/application.properties")
public class DBConfig {

    @Autowired
    ApplicationContext applicationContext;

    @Bean
    @ConfigurationProperties(prefix = "spring.datasource.hikari")
    public HikariConfig hikariConfig() {
        return new HikariConfig();
    }

    @Bean
    public DataSource dataSource() {
        return new HikariDataSource(hikariConfig());
    }

    @Bean
    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();

        bean.setDataSource(dataSource);
        bean.setMapperLocations(applicationContext.getResources("classpath:/sqlmap/*.xml"));
        bean.setTypeAliasesPackage("hello.test.domain");

        return bean.getObject();
    }

    @Bean
    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {
        return new SqlSessionTemplate(sqlSessionFactory);
    }

}



■ 3차시

Java JDK
이클립스 < Intelli J
STS (Spring Tool Suite 4)

https://spring/io/tools  jar 화일
> Projects > Spring Tools 4  
Spring Tools 4 for Eclips    windows x86_64  4.X

cmd > java  (설치가 되어 있어야 함) 
java -jar 다운받은 jar 화일명  (앞 몇글자 + TAB)
→ sts-4.22.0.RELEASE 폴더 생성
→ SpringToolSuite4 실행


■ 8차시
스프링부트 프로젝트 생성
1. start.spring.io 사이트에서 프로젝트 생성 → firedemo.zip 화일 압축 생성 → STS 툴에서 생성
2. STS 툴에서 생성

start.spring.io 사이트에서 프로젝트 생성
Project : Maven P / Gradle P
Language : Java / Kotlin / Groovy
Spring Boot : default 설정
Project Meatdata : default 설정
Dependencies : Spring Web, H2 Database, Sprin Data JPA
→ Generate - zip 화일 생성 
Alzip 여기서 압축풀기 (폴더 2개 생성 방지)


■ 9차시
SpringToolSuite4 실행
File > Import Project from File System or Archive

Problems 경고 발생 시 강의 내용 다시 확인...
application properties : port 충돌 시 변경, 폴더 위치 등 설정
static : html...       ←  localhost:8024/hello.html (static 에서 먼저 찾음)
template : mustasche 등 사용할 때...

실행 버튼 → 포트 충돌 시 강의 다시 확인...

■ 10차시
Maven → Gradle 추세 
Project Metadata default 사용
Depencies 
Spring Web, H2 Database, Spring Data JPA

Build paht... no JRE 경고 발생 시 해결방법 외 여러 에러상황 해결방법 有
project명 (boot) > Properties > Java Build Path > JRE System Library > Libararies 
→ JRE System Library [JavaSE-1.8] remove
→ Add Library > JRE System Library > workspace default JRE (jre)

static html 등 화일 생성 시 ctrl n 
Web > HTML File>화일명만 치고 엔터

UTF-8 아닐 경우 설정 확인

■ 11차시
src/main/java : java file

src/main/resources : property (속성) 정의, 구조변경 설정값
   > static
   > template - Layout (header / footer / 좌측메뉴) 
                     template engine : Time leaf / Mustash
   > application.properties

Maven Dependencies (의존성, 버전 충돌 없도록 관리 - 기존 스프링 문제...)

target > porn.xml - Maven에서 Project에 필요한 dedency 추가하여 관리하는 화일
start.spring.io 에서 필요한 dependency를 추가하지 못한 경우 
→ porn.xml에 관련 depency 없음 / Maven Dependencies에 // 없음
> porn.xml에 관련 depency 추가!! + project명 (boot) > Maven > Update Project... (Alt F5)

■ 12차시
스트링부트 Controller 역할과 이해
: 진입점 역할 (Whitelael Error Page 발생 → index.html or controller 사용 진입점을 찾아들어갈 수 있도록 만드는 것 가능)
: static에 있는 화일은 명확
  static/a.html ← localhost:8080/a.html
  static/test/b.html ← localhost:8080/test/b.html
: templates/index.html 혹은 상기 폴더에 넣지 않은 경우

src/main/resources/static/index.html ← localhost:8080 (index.html은 생략 가능)

글자폰트 사이즈 조정
Preference > General > Editors > Text Editors > Colors and Fonts > Text Font > Edit
                             > Appearance > Colors and Fonts > Text Font > Edit

■ 13차시
500 : 서버 접속 실패
404 : 진입점 찾지 못함

정적인 자원들 (html, css...)은 restart 하지 않아도 바로 반영

static/member/index.html
http://localhost:8080/member/  → Whitelabel Error Page (index.html 명시해야 함)

static/index.html
http://localhost:8080/ (html만 가능, htm X)

■ 14차시
index.html을 static 폴더가 아닌 templates 폴더에서  사용할 경우 간단치 않음
: Thymleaf 의존성 추가 (Thymleaf를 쓴다면 가장 손쉬운 방법)

start.spring.io   spring initializr > Dependency > Thyme Leaf 의존성 추가 

https://mvnrepository.com/
thymeleaf 검색 > Spring Boot Starter Thymeleaf
dependency copy → poem.xml dependences에 paste (버전정보 제외)
	<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

src/main/resources/templates/index.html ← localhost:8080

application.properties 설정 변경 가능
spring.application.name=firstdemo

■ 15차시
- template 하위 폴더 사용하고자 할 때 application.properties 수정
# thyme leaf의 templates의 하위 폴더를 지정할 경우
 spring.thymeleaf.prefix=classpath:templates/thymeleaf/

- 그 외 application.properties 설정 내용

server.port = 8024  // (8080 외 다른 port 설정 시)

spring.thymeleaf.prefix=classpath:templates/thymeleaf/
spring.thymeleaf.check-template-location=true
spring.thymeleaf.mode=HTML5
spring.thymeleaf.cache=false
spring.thymeleaf.suffix=.html


■ 16차시
Thymeleaf 의존성 추가 후 주요 속성 알아보기

src > main > reousrces > [static] 폴더에는 정적 리소스들을 ..
src >main > reousrces > [templates] 폴더에는 템플릿 파일들을 ..

Thymeleaf 확장자는 .html을 쓰고 templates 폴더에는 관련된 파일만 동작한다.

# 친구는 templates 폴더가 루트 폴더로 인식되는데 난 안되요 ???
# thymeleaf 경로 설정
spring.thymeleaf.prefix=classpath:/templates/   
                               home.html ← localhost:8080/home/ (controller 요청에 응답)
spring.thymeleaf.suffix =. html

# thymeleaf 템플릿에 대한 캐시를 남기지 않음. cache=false 설정하고 개발하다가 운영시는 true로 변경.
spring.thymeleaf.cache=false

# 템플릿 위치 존재 확인 - templates 디렉토리에 파일이 있는지 없는지 체크, 없으면 에러를 발생.
spring.thymeleaf.check-template-location=true


■ 17차시
controller 폴더 생성 > FirstController.java
mapping 필요

ctrl + shft O : import 자동 생성

package com.example.firstdemo.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class FirstController {
	
	@GetMapping("/home")
	public String homeMethod() {
		
		return "home";	
	}
	
	@GetMapping("/member/add")
	public String memberMethod() {
		
		return "member/add";	
	}
}

return : root folder

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



■ 18차시 스프링부트 MVC 패턴
MVC 패턴 (Model, View, Controller)

Model
> ??? 요청을 위한 데이터, 

View
→ UI 즉, 사용자 인터페이스로써 사용자가 접속해서 실제적으로 보고 이용하는 웹페이지 화면단.

Controller
→뷰페이지와 모델을 이어주는 중간 다리 역할.
→ 사용자의 요청이 들어오면 그에 맞는 적절한 뷰페이지를 연결하여 결과를 리턴.
→ 단순 요청 뿐만 아니라 데이터 전달 및 비즈니스 로직을 호출하여 그 결괏값을 전달하는 역할.

규모(기업 비유)가 클 경우 효율적으로 업무를 수행하기 위해 controller가 있는 것이 좋음
프로젝트도 마찬가지... 

■ 19차시 - 스프링부트 HTTP 단순 요청 및 모델 데이터 전달 실습
-. SampleController1.java
ackage com.example.firstdemo.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class SampleController1 {
	
	@GetMapping("/user/userinfo")
	public String userInfo() {
		
		return "/user/userinfo";
	}

	@GetMapping("/user/userdata")
	public String userData( Model model ) {
		
		model.addAttribute( "username", "홍길동" );
		// 뷰페이지단으로 같이 데이터 (model) 전달 
		
		return "/user/userinfo";
	}
	
	@GetMapping("/user/userid")
	public String userId( @RequestParam( value="userid", required=false ) String userid, Model model ) {
		
		/* 
		 * rewured=true 옵션은 디폴트가 true이고, 써놓지 않은면 디폴트값으로 true가 적용.
		 * 이 경우에는 반드시 주소창에 userid 파라미터 값을 넣어서 HTTP 요청을 넣어야 한다. 안그러면 페이지 에러가 발생.
		 * http://localhost:8080/user/userid?userid=highcera
		 * 
		 * 만약, false로 저장을 하면 파라미터 값을 넣지 않고 요청을 해도 페이지 에러가 발생하지 않는다.
		 * true가 기본값. 보통은 @RequestParam("userid")
		 */
		
		model.addAttribute( "userid", userid );
		return "/user/userinfo";  // userinfo.html 		
	}
	
	@GetMapping("/user/userparams")
	public String userParams(
			@RequestParam( value="userid" ) String uid, 
			@RequestParam( value="username" ) String uname,
			@RequestParam( value="useremail" ) String uemail, 
			@RequestParam( value="userhp", required=false ) String uhp,
			Model model	) {
		
		model.addAttribute( "userid", uid );
		model.addAttribute( "username", uname );
		model.addAttribute( "useremail", uemail );
		model.addAttribute( "userhp", uhp );
		
		return "/user/userparams";
	}
}

-. userinfo.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
	<meta charset="UTF-8">
	<title>SampleController1</title>
</head>
<body>
	<h1>userinfo.html</h1>
	<h1 th:text="'안녕하세요~' + ${ username } + '입니다.'">Guest</h1>
	<h1 th:text="${ userid }">유저아이디</h1>
	<h1 th:text="${ useremail }">유저이메일</h1>
	<h1 th:text="${ userhp }">유저핸드폰</h1>
</body>
</html>


■ 20차시 HTML 파일과 Template 파일의 차이 - 정적 vs 동적
※ 보통의 HTML 파일은 정적 파일이며, Template Engine 파일은 동적 파일이다.
동적이라는 것은 말 그대로 변화무쌍하게 컨텐츠의 내용이 바뀔 수 있다라는 뜻이다. 이러기 위해서는 내부에서 이러한 컨텐츠의 변화되는 부분을 반영할 수 있도록 해줘야 하는데 이때 템플릿 엔진의 문법이 사용된다.

→ Thymeleaf, Mustache, JSP 등은 뷰페이지 단을 표현하는 언어(?)라고 생각하면 된다.
→ 각각의 템플릿 엔진별 고유 문법을 배우고 익히는 과정이 필요.
→ 특히 웹 개발의 특성상 템플릿 문법을 배우는 것 이외에도 레이아웃을 구성하는 문법과 사용법을 배우는게 중요하다.
<span th:text= "${ username }""></span>


■ 21차시 타임리프 문법 적용시 기본 텍스트값이 있는 경우와 없는 경우의 차이
파라미터 값
기본 텍스트값 - 전달될 값이 있는 경우 대체됨
<h1 th:text="${ username }">Guest</h1>

<h1 th:text="'안녕하세요~' + ${ username } + '입니다.'">Guest</h1>

■ 22차시 스프링부트를 사용해 파라미터 값을 전달 받는 방법
th:text 태그안의 값을 셋팅한다는 것인데 태그안에 값은 왜 넣어두죠?
<h1th:text= "${username}" >게스트</h1>

※ 요청시 파라미터 값을 넘겨서 데이터를 전달하는건 어떻게 받나요?
앞서 시간에는 model에 [ name : value ] 값을 넣어서 직접 데이터를 전달했지만 
이번 시간에는 사용자의 요청시 여러 파라미터 값을 같이 넘겼을 때 전달 받는 방법에 대해서 학습한다.
→ Spring Boot 를 사용해 단일 Parameter 값을 전달 받는 방법
→ 여러 개의 Parameter 값을 전달 받는 방법

■ 23차시 단일 파라미터 값을 전달 받는 RequestParam
parameter 미전달 시 error 방지
required = false

	@GetMapping("/user/userid")
	public String userId( @RequestParam( value="userid", required=false ) String userid, Model model ) {
		model.addAttribute( "userid", userid );
		return "/user/userinfo";  // userinfo.html 		
	}
}


■ 24차시 여러 개의 파라미터 값을 전달 받는 RequestParam

-. SampleControllerq=1.java
@GetMapping("/user/userparams")
	public String userParams(
			@RequestParam( value="userid" ) String uid, 
			@RequestParam( value="username" ) String uname,
			@RequestParam( value="useremail" ) String uemail, 
			@RequestParam( value="userhp", required=false ) String uhp,
			Model model	) {
		
		model.addAttribute( "userid", uid );
		model.addAttribute( "username", uname );
		model.addAttribute( "useremail", uemail );
		model.addAttribute( "userhp", uhp );
		
		return "/user/userparams";
	}

-. userparams.html
@GetMapping("/user/userparams")
	public String userParams(
			@RequestParam( value="userid" ) String uid, 
			@RequestParam( value="username" ) String uname,
			@RequestParam( value="useremail" ) String uemail, 
			@RequestParam( value="userhp", required=false ) String uhp,
			Model model	) {
		
		model.addAttribute( "userid", uid );
		model.addAttribute( "username", uname );
		model.addAttribute( "useremail", uemail );
		model.addAttribute( "userhp", uhp );
		
		return "/user/userinfo";
	}

■ 25차시 Get 방식과 Post 방식의 차이와 스프링부트에서의 처리 방식

기본적으로 사용자가 서버에 어떤 요청을 넣을 때는 크게 Get 방식과 Post 방식이 있다. 그 외 다른 요청 방식들도 있다. 웹 개발이 처음이든 아디든 이러한 개념에 대해서는 당연히 잘 알고 있어야 하며 무엇보다 스프링부트 프레임워크에서는 이러한 방식들의 요청에 대해서 어떻게 처리하는지를 알고 있어야 하겠다.

→ 기본개념
Get과 Post는 HTTP 프로토콜을 통해서 서버에 어떤 값을 전달할 때 사용하는 방식의 종류. 쉽게 말해서 어떻게 전달하느냐의 차이다.

→ 구분은?
URL에 파라미터 값으로 데이터를 전달하면 Get 방식이고, Post 방식은 URL에 파라미터 정보가 보이지 않는다.
그 이유는 데이터가 Request Body에 포함되서 전달되기 때문에 파라미터가 노출되지 않는다.


※ Get방식과 Post 방식의 특징과 장단점
각 방식은 장단점이 있는데 기본적인 특징과 장단점에 대해서는 잘 기억하자.

기본적으로 Get 방식은 '조회' 이용시 많이 사용되고, Post 방식은 '수정'시 많이 사용된다.
- 검색의 결과 주소나 링크로써 사용되어지는 경우라면 Get 방식이 많다라고 생각하면 됨.
URL에 파라미터 정보가 노출되고 당연히 전달되는 데이터 값들도 노출되기 때문에 보안적인 측면에서는 높지 않다.
- Post 방식은 값을 숨겨서 전달할 수 있음. SSL 사용시 높은 보안 수준을 적용할 수 있음.
URL에는 정보를 담을 수 있는 한계가 있다. 그런 경우 Post 방식을 사용하면 된다.
Get 방식은 캐시가 남아있고, 브라우저의 히스토리에 파라미터 정보가 저장되어서 좋지 않을 수 있다.
- Post 방식의 경우 캐시가 남아있지 않고, 히스토리에 정보가 남지 않음.
- 그러나 캐시 덕분에 속도적인 측면에서는 Post 방식보다 좋음.
Post 방식은 바이너리 데이터도 전달이 가능하기 때문에 파일 업로드 등을 처리하기 위해서 Post 방식 사용.

※ 정리
기본적으로 '조회' 등을 처리할 때는 Get 방식을 많이 사용하고, '입력', '생성', '수정', '삭제' 등은 Post 방식으로 많이 사용헌다고 생각하면 된다. 절대적인 것은 아니나 보통 이렇게 많이 쓴다라고 생각하면 된다.

※ 스프링부트프레임워크에서의 처리 방식

→  @GetMapping("/user")
우리가 앞서 공부해왔던 방식이며, 스프링부트에서는 Get 방식의 요청에 대해서 @GetMapping()으로 처리한다.
→ 그럼 Post 방식의 요청 처리는 ??? @PostMapping()

■ 26차시 Post 방식의 요청시 스프링부트에서의 처리 방식 - PostMapping(1)
post 방식 실습은 form 양삭으로 입력을 받아서 처리하거나 출력...
src/main/resources > static > post 폴더 생성 > form.html (다중 data 입력)
src/main/resources > templates > thymeleaf > post > post.html (view, 게시)
src/main/java > com.example.firstdemo > controller > SampleControllers.java (post 방식 입력값 처리)

-. form.html
<html>
	<head>
		<meta charset="UTF-8">
		<title>Post Demo</title>
	</head>
	<body>
		<h1>The form method="POST"</h1>
		
		<form action="/post" method="POST" target="_blank">
		
			<label for="membername">Member name:</label>
			<input type="text" id="membername" name="membername"><br><br>
			<label for="memberid">Member id:</label>
			<input type="text" id="memberid" name="memberid"><br><br>
			<label for="memberemail">Member email:</label>
			<input type="text" id="memberemail" name="memberemail"><br><br>
			
			<input type="submit" value=" submit ">
			
		</form>
	</body>
</html>


■ 27차시 Post 방식의 요청시 스프링부트에서의 처리 방식 - PostMapping(2)
-. SampleController.java
public class SampleController2 {
	@PostMapping("/post")
	public String demoPosst( @RequestBody String req, Model model ) {
		model.addAttribute("req", req);
		
		System.out.println( "성공" );
		System.out.println( req );
			
		return "/post/post";  // post.html
	}
}


-.post.html
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Post Demo</title>
	</head>
	<body>
		<h1>Post 방식으로 전달된 값 출력하기</h1>
		<h1 th:text="${ req }">req</h1>
	</body>
</html>


■ 28차시 Post 방식의 요청시 스프링부트에서의 처리 방식 - PostMapping(3)
-. SampleController.java
public class SampleController2 {

	@PostMapping("/post")
	public String demoPost( 
			@RequestParam String membername, 
			@RequestParam String memberid,
			@RequestParam String memberemail,
			Model model  ) {
		
		model.addAttribute( "membername", membername );
		model.addAttribute( "memberid", memberid );
		model.addAttribute( "memberemail", memberemail );
		
		return "/post/post";  // post.html
	}
}


-.post.html
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Post Demo</title>
	</head>
	<body>
		<h1>Post 방식으로 전달된 값 출력하기</h1>
		<h1 th:text="${ membername }">멤버네임</h1>
		<h1 th:text="${ memberid }">멤버아이디</h1>
		<h1 th:text="${ memberemail }">멤버이메일</h1>		
	</body>
</html>


■ 29차시 스프링부트 DTO 객체 전달 - 이론

■ 30차시 스프링부트 DTO 객체 전달 - 실습

■ 31차시 스프링부트 DTO 객체 전달 - 실습


■ 29차시~42차시~












mysql> Create table tbl_users (
-> u_idx            int                Not Null   Auto_Increment,
-> u_id              varchar(32)    Not Null,
-> u_password    varchar (64)   Not Null,
-> u_name         varchar(32)     Not Null,
-> u_email         varchar(64)     Not Null,
-> Primary Key(u_idx)
-> )
-> Engine = InnoDB Charset = utf8mb4;

# DataSource
spring.datasource.url = jdbc:mysql://localhost:3306/member?autoReconnect=true
spring.datasource.username = root
spring.datasource.password = 1234
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver



testboard2
	src/main/java
		com.testboard2
			configuration
				DBConfiguration.java
			controller
				MemberController.java
			dto
				MemberDTO.java
			mapper
				MemberMapper.java (Interface)
			service
				MemberService.java (Interface)

	src/main/resources
		mapper
			MemberMapper.xml (SQL)
		static
		templates
			thymeleaf
				member
					memberWriteForm.html
				index.html
		application properties

	src/test/java
		com.testboard2
			MapperTests.java


Java Spring Boot (스프링부트) 프레임워크 제대로 배우기 Part.2

1차시 스프링부트 DB 연동에 대해서(1)
2차시 스프링부트 DB 연동에 대해서(2)
3차시 스프링부트 DB 연동 기술용어와 개념이해(1) - Connection
4차시 스프링부트 DB 연동 기술용어와 개념이해(2) - DBCP
5차시 스프링부트 DB 연동 기술용어와 개념이해(3) - DataSource HikariCP
6차시 스프링부트 DB 연동 기술용어와 개념이해(4) - MyBatis
7차시 스프링부트 DB 연동 기술용어와 개념이해(5) - MyBatis 영속성과 장단점 ORM과 비교
8차시 스프링부트 DB 연동 기술용어와 개념이해(6) - MyBatis SpringBoot 결합 모듈
9차시 스프링부트 DB 연동 기술용어와 개념이해(7) - MyBatis 동작과 주요 컴포넌트 역할
10차시 스프링부트 DB 연동 기술용어와 개념이해(8) - 정리
11차시 MySQL 설치 및 환경설정(1)
12차시 MySQL CHARSET utf8 vs utf8mb4 차이점
13차시 MySQL root 비밀번호 변경하는 방법
14차시 MySQL 데이터베이스 및 테이블 생성
15차시 MySQL 데이터베이스 및 테이블 생성 - 실습
16차시 MySQL 데이터베이스 및 테이블 생성 - 실습 - root 패스워드 변경
17차시 MySQL 데이터베이스 기본 쿼리문 실습
18차시 데이터베이스 연동 실습(1) - 프로젝트 생성


Java Spring Boot (스프링부트) 프레임워크 제대로 배우기 Part.2

1차시 스프링부트 DB 연동에 대해서(1)
2차시 스프링부트 DB 연동에 대해서(2)
3차시 스프링부트 DB 연동 기술용어와 개념이해(1) - Connection
4차시 스프링부트 DB 연동 기술용어와 개념이해(2) - DBCP
5차시 스프링부트 DB 연동 기술용어와 개념이해(3) - DataSource HikariCP
6차시 스프링부트 DB 연동 기술용어와 개념이해(4) - MyBatis
7차시 스프링부트 DB 연동 기술용어와 개념이해(5) - MyBatis 영속성과 장단점 ORM과 비교
8차시 스프링부트 DB 연동 기술용어와 개념이해(6) - MyBatis SpringBoot 결합 모듈
9차시 스프링부트 DB 연동 기술용어와 개념이해(7) - MyBatis 동작과 주요 컴포넌트 역할
10차시 스프링부트 DB 연동 기술용어와 개념이해(8) - 정리
11차시 MySQL 설치 및 환경설정(1)
12차시 MySQL CHARSET utf8 vs utf8mb4 차이점
13차시 MySQL root 비밀번호 변경하는 방법
14차시 MySQL 데이터베이스 및 테이블 생성
15차시 MySQL 데이터베이스 및 테이블 생성 - 실습
16차시 MySQL 데이터베이스 및 테이블 생성 - 실습 - root 패스워드 변경
17차시 MySQL 데이터베이스 기본 쿼리문 실습

18차시 데이터베이스 연동 실습(1) - 프로젝트 생성
new > start project > testboard (type Maven), com.testboard >project depency >web - spring web
src/main/java>com.testboard>new java package - com.testboard.controller -> new class > TestController
>start start 경고없이 이상없음 확인

DB 관련 의존성 포함 testboard2 project 생성
>project depency >web - spring web, JDBC API, MyBatis Framework, MySQL Driver, Spring Configuration Processor
->finish

error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
[2m2024-09-06T19:31:55.423+09:00[0;39m [31mERROR[0;39m [35m16600[0;39m [2m---[0;39m [2m[testboard3] [           main][0;39m [2m[0;39m[36mo.s.b.d.LoggingFailureAnalysisReporter  [0;39m [2m:[0;39m 

***************************
APPLICATION FAILED TO START
***************************
Description:
Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.
Reason: Failed to determine a suitable driver class
Action:
Consider the following:
	If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.
	If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).

Database 관련 환경설정 세팅 필요
[application.properties]
# DataSource
spring.datasource.url = jdbc:mysql://localhost:3306/member?autoReconnect=true
spring.datasource.username = root
spring.datasource.password = 1234
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver

19차시 데이터베이스 연동 실습(2) - New Datasource
[application.properties]
# New DataSource
# DataSource 정보를 읽어들일 때 datasource 하위의 hikari를 읽어들이지 않기 때문에
# 데이터소스 관련된 정보들을 hikari 내부로 옮겨서 새로 만든다.
# 데이터베이스 URL 경우도 HikariCP는 jdbc-url이라는 지정된 이름(키)으로 받기 때문에 url에서 jabc-url로 변경
spring.datasource.hikari.jdbc-url = jdbc:mysql://localhost:3306/member?autoReconnect=true&serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.hikari.username = root
spring.datasource.hikari.password = 1234
spring.datasource.hikari.driver-class-name = com.mysql.cj.jdbc.Driver

20차시 데이터베이스 연동 실습(3) - 필요한 폴더 및 파일구성(이론)

testboard2
	src/main/java
		com.testboard2
			configuration
				DBConfiguration.java
			dto
				MemberDTO.java
			mapper
				MemberMapper.java (Interface)

	src/main/resources
		mapper
			MemberMapper.xml
		application properties

	src/test/java
		com.testboard2
			MapperTests.java

package 및 class, interface, 화일(xlm) 생성

21차시 데이터베이스 연동 실습(4) - 필요한 폴더 및 파일구성(실습)

22차시 데이터베이스 연동 실습(5) - MemberDTO 생성과 IoC 컨테이너 개념
package com.testboard3.dto;

public class MemberDTO {
	
	// idx
	// private Long idx;
	
	private String name;
	private String id;
	private String phone;
	
	public MemberDTO() {}
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	
	@Override
	public String toString() {
		return "MemberDTO [name=" + name + ", id=" + id + ", phone=" + phone + "]";
	}
}

23차시 데이터베이스 연동 실습(6) - DBConfiguration
package com.testboard3.configuration;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;


/*
 * @Configuration : 스프링부트 환경설정 클래스임을 명시. 자동으로 빈 등록.
 * 이 애너테이션이 붙게되면 @ComponentScan이 스캔할 때 이 클래스에 @Bean으로 지정한 모든 빈들도 IoC 컨테이너에 등록. 
 */
@Configuration
@PropertySource("classpath:/application.properties")
public class DBConfiguration {
 
	@Autowired
	private ApplicationContext applicationContext;
	
	/* 
	 * Hikari 설정1
	 * @Bean : return되는 객체를 IoC 컨테이너에 등록.
	 * 특별히 지정하는 이름이 없다면 IoC 컨테이너에 해당 메서드명으로 등록. 물론 이름 저장도 가능. 보통은 메서드명으로 등록. 중복 X.
	 * application properties 파일로 부터 데이터베이스 관련된 정보를 읽어와서 히카리 설정 객체를 리턴.
	 * 접두어는 해당 접두어로 시작하는 정보들을 읽어온다.
	 */
	@Bean
	@ConfigurationProperties(prefix = "spring.datasource.hikari")
	public HikariConfig hikariConfig() {
		
		return new HikariConfig();
	}
	
	/*
	 * Hikari 설정2
	 * 
	 * 히카리 설정 객체(HikariConfig)를 넘겨받아서 DataSource 객체를 리턴.
	 * 이 단계에서 데이터베이스 연관이 완성.
	 * 만약 아이디나 패스워드가 틀렸다면 당연히 이 단계에서 오류 발생. 다시금 applicatio.properties 파일 체크.
	 * DB 연결이 잘 되었는지 확인해보기 위해서 콘솔에 dataSource 객체를 toString() 네서드로 출력.
	 * 히카리풀 뒤에 숫자가 붙어 나옴 --> HikariDataSource (HikariPool-1)
	 * 이 단계를 통해서 히카리CP(Connection Pool) 연결이 완성.
	 * 이제 DB 연결이 필요한 부분에서 이 dataSource를 가지고 연결해 주면 됨.
	 */
	@Bean
	public DataSource dataSource() {
		DataSource dataSource = new HikariDataSource( hikariConfig() );
		System.out.println( dataSource.toString() );
		
		return dataSource;
	}
	
	/*
	 * MyBatis 설정1
	 * 
	 * SqlSessionFactory <-- SqlSessionFactoryBean
	 * SqlSessionFactory 생성을 위해서 내부의 SqlSessionFactoryBean을 사용.
	 * 이때, 데이터소스 책체를 넘겨 받아서 처리해도 되고, 아니면 setDataSource(dataSource()) 이렇게 해줘도 됨.
	 * 
	 * 기본적인 설정 3가지
	 * 			setDataSource         : 발드된 DataSource를 셋팅.
	 * 			setMapperLocation     : SQL 구문이 작성된 *Mapper.xml의 경로를 정확히 동록.
	 * 			setTypeAliasesPackage : 인자로 Alias 대상 클래스가 위치한 패키지 경로
	 * 주의사항!
	 * SqlSessionFactory에 저장할 config 설정 시 Mapper에서 사용하고자하는 DTO, VO, Entity에 대해서 setTypeAlliasesPackage 지정 필요.
	 * 만약 지정해주지 않는다면 aliases 찾지 못한다는 오류가 발생될 수 있음. 
	 * */
	@Bean
	public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
		SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
		factoryBean.setDataSource( dataSource );
		factoryBean.setMapperLocations( applicationContext.getResources("classpath:/mapper/*Mapper.xml") );
		/*
		 * 매퍼에 대한 리소스는 어디에서 가져오지???
		 * 				- ApplicationContext 객체에서 가져올 수 있다.
		 *              - ApplicaitonContext는 쉽게말해 프레임워크 컨터이너라고 생각하면 됨.
		 *              - ApplicationContext는 애플리케이션이 스타드에서 끝나는 그 순간까지 이 애플리케이션에서 필요한 모든 자원들을 모아놓고 관리. 
		 * 
		 */
		factoryBean.setTypeAliasesPackage( "com.testboard3.dto" );
		
		return factoryBean.getObject();
	}
	
	/*
	 * MyBatis 설정2
	 * 
	 * SqlSessionTemplate <-- SqlSessionFactory
	 * 널겨받은 sqlSessionFactory를 통해서 sqlSessionTemplate 객체를 생성 및 리턴.
	 * SQL 구문의 실행과 트랜젝션 등을 관리하는 가장 열일하는 애.
	 * MayBatis의 sqlSession 객체가 Spring+MyBatis 연동 모듈에서는 sqlSessionTemplate이 대체. 
	 * 
	 */
	@Bean
	public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) throws Exception {
		
		return new SqlSessionTemplate(sqlSessionFactory);
	}
}

24차시 데이터베이스 연동 실습(7) - HikariCP
25차시 데이터베이스 연동 실습(8) - MyBatis1
26차시 데이터베이스 연동 실습(9) - MyBatis2
27차시 데이터베이스 연동 실습(10) - MyBatis3

28차시 데이터베이스 연동 실습(11) - MemberMapper 인터페이스
package com.testboard3.mapper;

import org.apache.ibatis.annotations.Mapper;

import com.testboard3.dto.MemberDTO;

@Mapper
public interface MemberMapper {
	
	public void insertMember(MemberDTO memberDTO);

}

29차시 데이터베이스 연동 실습(12) - MemberMapper SQL 쿼리문
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatice.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.testboard3.mapper.MemberMapper">

	<insert id="insertMember" parameterType="MemberDTO">
		<!-- INSERT INTO member (name, id, phone) VALUES ( '이순신', 'mr.soon', '010-111-2222' ); -->
		INSERT INTO member (
			  name 
			, id
			, phone
		) VALUES ( 
			  #{name}
			, #{id}
			, #{phone}
		);
	</insert>

</mapper>
30차시 데이터베이스 연동 실습(13) - MapperTests
package com.testboard3;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.testboard3.dto.MemberDTO;
import com.testboard3.mapper.MemberMapper;

@SpringBootTest
public class MapperTests {
	
	@Autowired
	private MemberMapper memberMapper;
	
	@Test
	public void testInsert() {
		
		MemberDTO m1 = new MemberDTO();
		
		m1.setName( "장발장" );
		m1.setId( "mr.bal" );
		m1.setPhone( "000-111-2222" );
		
		System.out.println( m1 );
		memberMapper.insertMember( m1 );

		System.out.println("---------------------------------------------");
		System.out.println("레크드가 추가되었습니다.");
		System.out.println("---------------------------------------------");
	
	}
}

Run As -> MapperTests

31차시 데이터베이스 연동 실습(14) - 최종 테스트



Java Spring Boot (스프링부트) 프레임워크 제대로 배우기 Part.3

1차시 강의개요
2차시 DB 연동 후 해야할 것들
3차시 스프링 부트 프레임워크 각 계층(1)
4차시 스프링 부트 프레임워크 각 계층(2)
5차시 스프링 부트 프레임워크 각 계층(3) - Data Access Layer
6차시 스프링 부트 프레임워크 각 계층(4) - Domain
7차시 스프링 부트 프레임워크 각 계층(5) - DTO, DAO
8차시 Service Layer(서비스 계층) 만들기(1) - 메인과 멤버 폼페이지

testboard2
	src/main/java
		com.testboard2
			configuration
				DBConfiguration.java
			controller
				MemberController.java
			dto
				MemberDTO.java
			mapper
				MemberMapper.java (Interface)
			service
				MemberService.java (Interface)
				MemberServiceimple.java

src/main/resources
		mapper
			MemberMapper.xml (SQL)
		static
		templates
			thymeleaf
				member
					memberWriteForm.html
				index.html
		application properties

생성 후 실행 시 404 error (page not found)
thymeleaf를 root folder로 인식하도록 했는지 확인

application.properties에 아래 내용 추가
# Thymeleaf
# cache 기능은 서버 내부에 cache 저장을 못하도록 끄면 좋은. 수정 시 매번 프로젝트를 재시작 안해도 됨. 
spring.thymeleaf.prefix=classpath:templates/thymeleaf/
spring.thymeleaf.check-template-location=true
spring.thymeleaf.mode=HTML5
spring.thymeleaf.cache=false
spring.thymeleaf.suffix=.html

testboard3/pom.xml thymleaf depency 추가
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>


project명에서 오른쪽 마우스 maven > update project


9차시 Service Layer(서비스 계층) 만들기(2) - 메인과 멤버 폼페이지와 에러 대처
10차시 Service Layer(서비스 계층) 만들기(3) - Form 화면
11차시 Service Layer(서비스 계층) 만들기(3) - Form 정보 DB 입력
12차시 Service Layer(서비스 계층) 만들기(4) - 서비스단 구현

[MemberController.java]
package com.testboard3.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import com.testboard3.dto.MemberDTO;
import com.testboard3.service.MemberService;

@Controller
public class MemberController {
	
	@Autowired
	private MemberService memberService;

	@GetMapping("/member/memberWriteForm")
   	public String memberWriteForm() {

		return "/member/memberWriteForm"; // memberWriteForm.html
	}
	
	@PostMapping("/member/memberWriteOk")
	public String insertMember(
			MemberDTO m1, 
			Model model ) {

		try {
			// 등록 처리
			System.out.println(m1.getName());
			System.out.println(m1.getId());
			System.out.println(m1.getPhone());

			memberService.insertMember(m1);			
		} catch (Exception e) {
			// err
		}

		return "redirect:/";
	}
}	

[MemberServiceImpl]
import org.springframework.stereotype.Service;

import com.testboard3.dto.MemberDTO;
import com.testboard3.mapper.MemberMapper;

@Service
public class MemberServiceImpl implements MemberService {

	@Autowired
	private MemberMapper memberMapper;
	
	@Override
	public void insertMember( MemberDTO memberDTO) {

		memberMapper.insertMember( memberDTO );
	}
	
}

[MemberService]
package com.testboard3.service;

import org.springframework.stereotype.Service;

import com.testboard3.dto.MemberDTO;

@Service
public interface MemberService {
	
	public void insertMember( MemberDTO memberDTO );

}

[index.html]
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	index.html ~ :)
	<br>
	<br>
 
	<a href="/member/memberWriteForm">사용자 등록화면 이동하기</a>
	<!-- a href="/member/memberWriteFormNew">사용자 등록화면 이동하기</a>  --> 
</body>
</html>

[MemberWriteForm]
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Member Registration Form</title>
		<style>
			form > label {
				display: inline-block;
				width: 120px;
			}
			form > input {
				padding: 4px;
				margin-bottom: 4px;
			}
		</style>
	</head>
	<body>
		<h1>Member Registration Form</h1>
		
		<form action="/member/memberWriteOk" method="POST" target="_blank">
		
			<label for="name">Name</label>
			<input type="text" id="name" name="name">
			<br>
			
			<label for="id">ID</label>
			<input type="text" id="id" name="id">
			<br>
			
			<label for="phone">Phone</label>
			<input type="text" id="phone" name="phone">
			<br><br>
			
			<input type="submit" value=" Submit "> <input type="reset" value=" Reset ">
					
		</form>

13차시 MemberDTO 수정 처리(1)
* 회원 등록 Form 페이지 + 회원 수정 Form
memberWriteFrom 으로 회원등록 / 수정을 같이 사용. 전달된 parameter num null 유무로 판단
public String memberWriteForm( 
				@RequestParam( value="num", required=false ) Integer num,
				Model model ) {

int num의 경우 error


14차시 MemberDTO 수정 처리(2)
15차시 MemberDTO 수정 처리(3)

[MemberController.java]
package com.testboard3.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.testboard3.dto.MemberDTO;
import com.testboard3.service.MemberService;

@Controller
public class MemberController {
	
	/*
	 * DI
	 * 
	 */
	@Autowired
	private MemberService memberService;

	/*
	 * 회원 등록 Form 페이지 + 회원 수정 Form
	 * 
	 */
	@GetMapping("/member/memberWriteForm")
	public String memberWriteForm( 
				@RequestParam( value="num", required=false ) Integer num,
				Model model ) {
		
				/*
				 *	required 옵션은 디폴트가 true이고, 써놓지 않으면 디폴트값으로 true가 적용.
				 *	기본값 true로 사용을 하는 경우 --> 보통 줄여서 @RequestParam("num") 
				 */
				
		/*
		 *		required 옵션은 디폴트가 true이고, 써놓지 않으면 디폴트값으로 true가 적용.
		 *		기본값 true로 사용을 하는 경우 --> 보통 줄여서 @RequestParam("num") 
		 *
		 *  넘어온 값이 null인지 체크
		 *  num이 null인지 비교를 할 때 주의사항 !
		 *  primitive Type(원시 타입)인 int는 null일 숭 없음. ull이 필요한 경우 Integer 사용. 또는 0 사용.
		 *  if( num != null) { ...
		 */
		if( num != null ) {
			
			System.out.println( num );
			// null이 아니라는 것은 파라미터 값으로 num 값이 넘어왔다는 것이므로 "수정" 처리라고 볼 수 있음.
			// 따라서, 여기에다 수정에 대한 처리 코드를 작성.	
			
			// 수정 처리
			// 먼저, 넘어온 num 값에 대한 회원 정보를 데이터베이스에서 가져오고 --> 해당 회원 정보를 Form 페이지로 전달.
				
			MemberDTO m1 = memberService.getMemberOne( num );
			
			// 잘 되는지 콘솔에 출력
			System.out.println( m1.getName() );
			System.out.println( m1.getId() );
			System.out.println( m1.getPhone() );
			
			// Form 페이지로 m1 객체를 전달 --> 모델(model)
			model.addAttribute( "memberDTO", m1 );
			model.addAttribute( "formTitle", "Modification" );
//			model.addAttribute( "num", num );
		}
		else {
			
			System.out.println( "null 입니다." );
			
		}
//				// 등록 처리(신규 회원)
//				model.addAttribute( "memberDTO", new MemberDTO() );
//				model.addAttribute( "formTitle", "Registration" );
//				
//			}	
			
			
				
//				model.addAttribute( "msg", "회원 정보가 없습니다. 메인 페이지로 이동합니다." );
//				model.addAttribute( "url", "/" );
//				
//				return "/member/messageAlert";  // messageAlert.html
//			}
			
		return "/member/memberWriteForm"; // memberWriteForm.html
	}
	
	/*
	 * 회원 등록 Ok
	 * 
	 */
	@PostMapping("/member/memberWriteOk")
	public String insertMember(
			MemberDTO m1, 
			Model model ) {

		try {
			// 등록 처리
			System.out.println(m1.getName());
			System.out.println(m1.getId());
			System.out.println(m1.getPhone());

			memberService.insertMember(m1);
		} catch (Exception e) {
			// err
		}

		return "redirect:/";
	}

}	

[MemberService.java]
package com.testboard3.service;

import org.springframework.stereotype.Service;

import com.testboard3.dto.MemberDTO;

@Service
public interface MemberService {
	
	public void insertMember( MemberDTO memberDTO );
	public MemberDTO getMemberOne( int num );

}

[MemberServiceImpl.java]
package com.testboard3.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.testboard3.dto.MemberDTO;
import com.testboard3.mapper.MemberMapper;

@Service
public class MemberServiceImpl implements MemberService {

	/*
	 * DI
	 * 
	 */
	@Autowired
	private MemberMapper memberMapper;
	
	/*
	 * SELECT MEMBER ONE
	 * 
	 */
	@Override
	public void insertMember( MemberDTO memberDTO) {

		memberMapper.insertMember( memberDTO );
	}
	
	/*
	 * SELECT MEMBER ONE
	 * 
	 */
	@Override	
	public MemberDTO getMemberOne( int num ) {
		
		return memberMapper.selectMemberOne( num );
	}
	
}


[MemberWriteForm.html]
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Member Registration Form</title>
		<style>
			form > label {
				display: inline-block;
				width: 120px;
			}
			form > input {
				padding: 4px;
				margin-bottom: 4px;
			}
		</style>
	</head>
	<body>
		<h1>Member Registration Form</h1>
		
		<form action="#" th:action="@{/member/memberWriteOk}" th:object="${memberDTO}" method="POST">
	
			<label for="name">Name</label>
			<input type="text" id="name" name="name" th:field="*{name}">
			<br>
			
			<label for="id">ID</label>
			<input type="text" id="id" name="id" th:field="*{id}">
			<br>
			
			<label for="phone">Phone</label>
			<input type="text" id="phone" name="phone" th:field="*{phone}">
			<br><br>
			
			<input type="submit" value=" Submit "> <input type="reset" value=" Reset ">
					
		</form>
		
[MemberMapper.xml]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatice.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.testboard3.mapper.MemberMapper">

	<insert id="insertMember" parameterType="MemberDTO">
		<!-- INSERT INTO member (name, id, phone) VALUES ( '이순신', 'mr.soon', '010-111-2222' ); -->
		INSERT INTO member (
			  name 
			, id
			, phone
		) VALUES ( 
			  #{name}
			, #{id}
			, #{phone}
		);
	</insert>
	
	<select id="selectMemberOne" parameterType="int" resultType="MemberDTO">
			SELECT * FROM member WHERE num = 1;	
	</select>

</mapper>

16차시 MemberDTO 수정 처리(4)
[MemberWriteForm]
<body>
	<h1>Member <span th:text="${formTitle}">Registration</span> Form</h1> 추가		

[MemberController.java]
	else {
		System.out.println( "null 입니다." );

		// 등록 처리(신규 회원)
		model.addAttribute( "memberDTO", new MemberDTO() );
		model.addAttribute( "formTitle", "Registration" );
	}

[MemberMapper.xml]
SELECT * FROM member WHERE num = 1; → SELECT * FROM member WHERE num = #{num};

[MySQL table row 정리]
DELETE FROM member WHERE num=18;
DELETE FROM member WHERE num in (5, 6);
set @cnt = 0; 
update "테이블명" set "테이블명"."컬럼명" = @cnt:=@cnt+1;
Alter Table extable Auto_increment=5;
Alter Table member Auto_increment=13;


17차시 DB에서 가져온 회원 정보가 없을 경우에 대한 처리(1)

미등록값 요청 시 처리 
MemberDTO m1 = memberService.getMemberOne( num );
m1 null

else {
			
	System.out.println( "null 입니다." );
	// null 이라는 것은 파라미터 값으로 num 값이 넘어온게 없다는 것이므로 "입력" 처리라고 볼 수 있음.
	// 따라서, 여기에다 등록에 대한 처리 코드를 작성.
			
	// 등록 처리(신규 회원)
	model.addAttribute( "memberDTO", new MemberDTO() );
	model.addAttribute( "formTitle", "Registration" );
			
}

18차시 DB에서 가져온 회원 정보가 없을 경우에 대한 처리(2)

[messageAlert] 사용
if( m1 == null ) {
				
	// 1번 방식 : 리다이렉트(가장 심플)
	// return "redirect:/member/memberWriteForm";
				
	// 2번 방식 : PrintWriter 사용
	//import 필요하고, 추가 처리 필요(아래 코드와 같은)
	// HttpServletResponse ) throws Exception { ...
				
	// 3번 방식 : 특정 페이지 (Error Message page)로 데이터 값들을(Model을 사용) 보내서 출력
				
	model.addAttribute( "msg", "회원 정보가 없습니다. 메인 페이지로 이동합니다." );
	model.addAttribute( "url", "/" );
				
	return "/member/messageAlert";  // messageAlert.html

19차시 뷰 페이지 에러 처리 및 errorMessage 파일 범용적으로 사용하기
20차시 뷰 페이지 Form 수정 및 타임리프 if 구문 정리(1)
21차시 뷰 페이지 Form 수정 및 타임리프 if 구문 정리(2)
22차시 뷰 페이지 Form 수정 및 타임리프 if 구문 정리(3)

[MemberWriteForm.html]
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Member Registration Form</title>
		<style>
			form > label {
				display: inline-block;
				width: 120px;
			}
			form > input {
				padding: 4px;
				margin-bottom: 4px;
			}
		</style>
	</head>
	<body>
		<!-- <h1>Member <span th:text="${formTitle}">Registration</span> Form</h1> -->
		<!-- 
		th:if 조건문 설명:
			1. 기본적으로 if 구문을 사용해서 조건을 비교해도 되고, unless 구문을 사용해도 가능.
			2. 다소 직관적이지 못하고 헷갈릴 수 있음. (처음 사용자)
			3. if 구문을 사용하는게 보다 직관적이고, unless 구문을 사용하면 다소 직관적이지 못하게 
			   느낄 수 있음.
			4. th:unless 구문은 if문과 조건이 동일하지만 if 조건이 아닌 다른 조건의 경우를 찾음.
			5. ~하지 않는 한, ~한 경우[때] 외에는...
		-->

		<h1>Member
		
			<!-- 다중 if 구문 사용 -->
			<!--
			<span th:if="${formTitle} == 'Registration'" th:text="${formTitle}"></span>
			<span th:if="${formTitle} == 'Modification'" th:text="${formTitle}"></span>			 			-->
				
			<!-- if ... unless 구문 사용 -->
			<span th:if="${formTitle} == 'Modification'" th:text="${formTitle}"></span>
			<span th:unless="${formTitle} == 'Modification'" th:text="${formTitle}"></span>			  
		Form</h1>
		
		<!-- form action="#" th:action="@{/member/memberWriteOk}" th:object="${memberDTO}" method="POST">  -->
		<!-- 삼항연산자 구문을 사용하여 "등록" 시와 "수정" 시 액션 주소 다르게 처리  -->
		<form
			th:object="${memberDTO}"
			th:action="${formTitle != 'Registration' ? '/member/memberUpdateOk' : '/member/memberWriteOk'}"
			method="POST"
			id="memberWriteForm">

		<input type="hidden" name="num" th:if="${formTitle} == 'Modification'" th:value="${num}"> 			<!-- 수정일 때 필요, 등록일 때는 필요 없음 → th:if 사용 -->
			
			<label for="name">Name</label>
			<input type="text" id="name" name="name" th:field="*{name}">
			<br>
			
			<label for="id">ID</label>
			<input type="text" id="id" name="id" th:field="*{id}">
			<br>
			
			<label for="phone">Phone</label>
			<input type="text" id="phone" name="phone" th:field="*{phone}">
			<br><br>
			
			<!-- input type="submit" value=" Submit "> <input type="reset" value=" Reset " -->
			<!-- 
				설명:
				form 태크안에 button 태그로 버튼을 만드는 경우와 바깥쪽에 만드는 경우 주의사항?
					1. 폼 태그 안쪽에 만드는 경우 ... type="submit" 지정만 해주면 됨
					2. 폼 태그 바깥에 만드는 경우 ... 폼 요소에 id 지정 후 버튼 태그에 해당 id를 명   
                                           시해준다. 안해주면 아예 클릭이 안됨.
			 -->
			 
		</form>
		
		<!--  1번 방식 : 다중 if 구문 사용 -->
		<!--  
		<button type="submit" form="memberWriteForm" th:if="${formTitle} == 'Registration'">회원등록</button>
		<button type="submit" form="memberWriteForm" th:if="${formTitle} == 'Modification'">회원수정</button>
		<button type="submit" form="memberWriteForm" th:if="${formTitle} == 'Deletion'">회원삭제</button>
		--> 
		
		<!--  2번 방식 : if ... else 구문과 같은 효과는? if ... unless 구문 사용 -->
		<!--  한가지 주의할 점은 if 조건과 unless 조건을 동일하게 명시해줘야 함  -->
		<!--
		<button type="submit" form="memberWriteForm" th:if="${formTitle} == 'Registration'">회원등록</button>
		<button type="submit" form="memberWriteForm" th:unless="${formTitle} == 'Registration'">회원수정</button>
		--> 
		 
		<!--  3번 방식 : if ... else 구문과 같은 효과는? switch 구문 사용 -->
		<div th:switch="${formTitle}">
			<button type="submit" form="memberWriteForm" th:case="Registration">회원등록</button>
			<button type="submit" form="memberWriteForm" th:case="Modification">회원수정</button>
			<button type="submit" form="memberWriteForm" th:case="Deletion">회원삭제</button>		
		</div>
		 
	</body>
</html>

form 요소 바깥쪽에 버튼을 만들 경우 id 사용 : id="memberWriteForm" / form="memberWriteForm"


23차시 수정 처리를 위한 DB 연동 작업(1)
memberWriteForm에서 num값을 같이 전송 필요
<input type="hidden" name="num" th:if="${formTitle} == 'Modification'" th:value="${num}">  
			<!-- 수정일 때 필요, 등록일 때는 필요 없음 → th:if 사용 -->

[MemberController.java]
model.addAttribute( "num", num );  // num도 memberDTO, formTitle과 함께 넘겨줘야 함


24차시 수정 처리를 위한 DB 연동 작업(2) - 수정 시 생각해봐야 하는 것 3가지
25차시 수정 처리를 위한 DB 연동 작업(3) - DB 수정 처리
26차시 수정 처리를 위한 DB 연동 작업(4) - DB 에러 처리

[MemberController.java]
package com.testboard3.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.testboard3.dto.MemberDTO;
import com.testboard3.service.MemberService;

import jakarta.servlet.http.HttpServletRequest;

@Controller
public class MemberController {
	
	/*
	 * DI
	 * 
	 */
	@Autowired
	private MemberService memberService;

	/*
	 * 회원 등록 Form 페이지 + 회원 수정 Form
	 * 
	 */
	@GetMapping("/member/memberWriteForm")
	public String memberWriteForm( 
			@RequestParam( value="num", required=false ) Integer num,
			Model model ) {
	
			//	required 옵션은 디폴트가 true이고, 써놓지 않으면 디폴트값으로 true가 적용.
			//	기본값 true로 사용을 하는 경우 --> 보통 줄여서 @RequestParam("num") 
				 				
		 //
		 //		required 옵션은 디폴트가 true이고, 써놓지 않으면 디폴트값으로 true가 적용.
		 //		기본값 true로 사용을 하는 경우 --> 보통 줄여서 @RequestParam("num") 
		 //
		 //*  넘어온 값이 null인지 체크
		 //*  num이 null인지 비교를 할 때 주의사항 !
		 //*  primitive Type(원시 타입)인 int는 null일 숭 없음. ull이 필요한 경우 Integer 사용. 또는 0 사용.
		 //*  if( num != null) { ...
		if( num != null ) {
			
			System.out.println( num );
			// null이 아니라는 것은 파라미터 값으로 num 값이 넘어왔다는 것이므로 "수정" 처리라고 볼 수 있음.
			// 따라서, 여기에다 수정에 대한 처리 코드를 작성.	
			
			// 수정 처리
			// 먼저, 넘어온 num 값에 대한 회원 정보를 데이터베이스에서 가져오고 --> 해당 회원 정보를 Form 페이지로 전달.
				
			MemberDTO m1 = memberService.getMemberOne( num );
			
			//DB에서 가져온 회원 정보가 없을 경우 --> 즉, m1 객체가 null인 경우,
			if( m1 == null ) {
				
				// 1번 방식 : 리다이렉트(가장 심플)
				// return "redirect:/member/memberWriteForm";
				
				// 2번 방식 : PrintWriter 사용
				//import 필요하고, 추가 처리 필요(아래 코드와 같은)
				// HttpServletResponse ) throws Exception { ...
				
				// 3번 방식 : 특정 페이지 (Error Message page)로 데이터 값들을(Model을 사용) 보내서 출력
				
				model.addAttribute( "msg", "회원 정보가 없습니다. 메인 페이지로 이동합니다." );
				model.addAttribute( "url", "/" );
				
				return "/member/messageAlert";  // messageAlert.html
			}		
			
			// 잘 되는지 콘솔에 출력
			System.out.println( m1.getName() );
			System.out.println( m1.getId() );
			System.out.println( m1.getPhone() );
			
			// Form 페이지로 m1 객체를 전달 --> 모델(model)
			model.addAttribute( "memberDTO", m1 );
			model.addAttribute( "formTitle", "Modification" );
			model.addAttribute( "num", num );
		}
		else {
			
			System.out.println( "null 입니다." );
			// null 이라는 것은 파라미터 값으로 num 값이 넘어온게 없다는 것이므로 "입력" 처리라고 볼 수 있음.
			// 따라서, 여기에다 등록에 대한 처리 코드를 작성.
			
			// 등록 처리(신규 회원)
			model.addAttribute( "memberDTO", new MemberDTO() );
			model.addAttribute( "formTitle", "Registration" );
			
		}				
			
		return "/member/memberWriteForm"; // memberWriteForm.html
	}
	
	/*
	 * 회원 등록 Ok
	 * 
	 */
	@PostMapping("/member/memberWriteOk")
	public String insertMember(
			MemberDTO m1, 
			Model model ) {

		try {
			// 등록 처리
			System.out.println(m1.getName());
			System.out.println(m1.getId());
			System.out.println(m1.getPhone());

			memberService.insertMember(m1);
			
			// 등록 안내 메시지 출력
			model.addAttribute( "msg", "회원 등록이 처리되었습니다. 메인 페이지로 이동합니다." );
			model.addAttribute( "url", "/" );
			
			return "/member/messageAlert";  // messageAlert.html
			
		} catch (Exception e) {
			// err
		}

		return "redirect:/";
	}
	
	/*
	 * 회원 수정 Ok
	 * 
	 */
	@PostMapping("/member/memberUpdateOk")
	public String updateMember(
			MemberDTO m1, 
			HttpServletRequest request,
			Model model ) {
		
		// 넘어오는 num 값을 받아서 정수형으로 형 변환 ---> getParameter() 반환이 String 이므로,
		String num_ = request.getParameter("num");
		int num = Integer.parseInt(num_);
			
		try {
			// 수정 처리
			System.out.println(m1.getName());
			System.out.println(m1.getId());
			System.out.println(m1.getPhone());
			System.out.println( "넘어온 번호는 = " + num );

			memberService.updateMember(m1);
			
			model.addAttribute( "msg", "회원 정보가 수정되었습니다. 확인 페이지로 이동합니다. ^.~" );
			model.addAttribute( "url", "/member/memberWriteForm?num=" + num );
			
			return "/member/messageAlert";  // messageAlert.html
			
		} catch (Exception e) {
			// err
		}

		return "redirect:/member/memberWriteForm?num=" + num;
	}
}

[MemberService.java]
package com.testboard3.service;

import org.springframework.stereotype.Service;

import com.testboard3.dto.MemberDTO;

@Service
public interface MemberService {
	
	public void insertMember( MemberDTO memberDTO );
	public MemberDTO getMemberOne( int num );
	public void updateMember( MemberDTO memberDTO );

}

[MemberServiceImpl.java]
package com.testboard3.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.testboard3.dto.MemberDTO;
import com.testboard3.mapper.MemberMapper;

@Service
public class MemberServiceImpl implements MemberService {

	/*
	 * DI
	 * 
	 */
	@Autowired
	private MemberMapper memberMapper;
	
	/*
	 * SELECT MEMBER ONE
	 * 
	 */
	@Override
	public void insertMember( MemberDTO memberDTO) {

		memberMapper.insertMember( memberDTO );
	}
	
	/*
	 * SELECT MEMBER ONE
	 * 
	 */
	@Override	
	public MemberDTO getMemberOne( int num ) {
		
		return memberMapper.selectMemberOne( num );
	}
	
	/*
	 * UPDATE
	 * 
	 */
	@Override	
	public void updateMember( MemberDTO memberDTO ) {
		
		memberMapper.updateMember( memberDTO );
	}
}

[MemberMapper.java]
package com.testboard3.mapper;

import org.apache.ibatis.annotations.Mapper;

import com.testboard3.dto.MemberDTO;

@Mapper
public interface MemberMapper {
	
	public void insertMember(MemberDTO memberDTO);
	public MemberDTO selectMemberOne( int num );
	public void updateMember(MemberDTO memberDTO);

}

[MemberMapper.xml]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatice.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.testboard3.mapper.MemberMapper">

	<insert id="insertMember" parameterType="MemberDTO">
		<!-- INSERT INTO member (name, id, phone) VALUES ( '이순신', 'mr.soon', '010-111-2222' ); -->
		INSERT INTO member (
			  name 
			, id
			, phone
		) VALUES ( 
			  #{name}
			, #{id}
			, #{phone}
		);
	</insert>
	
	<select id="selectMemberOne" parameterType="int" resultType="MemberDTO">
		<!-- SELECT * FROM member WHERE num = #{num}; -->
		<![CDATA[
			SELECT 
				* 
			FROM 
				member 
			WHERE 
				num = #{num};	
		]]>
	</select>
	
	<update id="updateMember" parameterType="MemberDTO">
		<![CDATA[
			UPDATE
				member
			SET
				  name = #{name}
				, id = #{id}
				, phone = #{phone}
			WHERE
				num = #{num};
		]]>
	</update>
</mapper>

DB update가 제대로 안됨!! → xml 에 data hard coding 해서 확인. #{num} vs. 1

MemberDTO.java num 관련 부분 누락 (등록 시 문제없지만 수정 시 문제)
	// Fields
        private int num;	추가



27차시 수정 처리를 위한 DB 연동 작업(5) - messageAlert 후 이동시키기1

[MemberController.java]]
	// 안내 메시지 및 URL 정보를 전달 --> messageAlert.html
	// 3번 방식 : 특정 페이지로 데이터 값들을(Model을 사용) 보내서 출력
	model.addAttribute( "msg", "회원 정보가 수정되었습니다. 확인 페이지로 이동합니다. ^.~" );
	model.addAttribute( "url", "/member/memberWriteForm?num=" + num );
			

28차시 수정 처리를 위한 DB 연동 작업(6) - messageAlert 후 이동시키기2

[memberWriteForm.html]
<input type="hidden" name="num" th:value="${num}"> →
<input type="hidden" name="num" th:if="${formTitle} == 'Modification'" th:value="${num}">  




여기부터~


29차시 Form 디자인(1)
30차시 Form 디자인(2) - 실습1
31차시 Form 디자인(3) - 실습2

32차시 Form 디자인 Thymeleaf 적용하여 DB연동 완료하기


33차시 리스트 페이지 만들기(1)
34차시 리스트 페이지 만들기(2)
35차시 리스트 페이지 만들기(3) - 뷰페이지 만들기

[index.html]
<!DOCTYPE html>
<html>
      <head>
            <meta charset="UTF-8">
            <title>Insert title here</title>
      </head>
      <body>

	index.html ~ :)
	<br>
	<br>
	
	<a href="/member/memberWriteFormNew">사용자 등록화면 이동하기</a>  
	<br>
	
	<a href="/member/memberList">사용자 리스트 페이지 이동하기</a>  
	          
</body>
</html>

[memberList.html]
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Insert title here</title>
	</head>
	<body>
		<table border=1 cellpadding=5>
			<thead>
				<tr>
					<th>Num</th>
					<th>Name</th>
					<th>ID</th>
					<th>Phone</th>
				</tr>
			</thead>
			<tbody>
				<tr th:each="row : ${memberList}">
					<td th:text="${row.num}"></td>
					<td th:text="${row.name}"></td>
					<td th:text="${row.id}"></td>
					<td th:text="${row.phone}"></td>
				</tr>
			</tbody>
		</table>
	 		  
	</body>
</html>

[memberMapper.xml]
...
<select id="selectMemberAll" resultType="MemberDTO">
		<![CDATA[
			SELECT
				*
			FROM
				member;
		]]>
</select>
...

[memberMapper.java]
public interface MemberMapper {
	...
	public List<MemberDTO> selectMemberAll();
}

[MemberServiceImpl.java]
@Override	
	public List<MemberDTO> getMemberList() {
		return memberMapper.selectMemberAll();	
	}

[MemberService.java]
public interface MemberService {
        ...
	public List<MemberDTO> getMemberList();
}

[MemberController.java]
	@GetMapping("/member/memberList")
	public String memberList( Model model ) {
		List<MemberDTO> memberList = memberService.getMemberList();
		
		System.out.println( memberList.get(0).toString() );
		System.out.println( memberList.get(16).toString() );
	
		model.addAttribute("memberList", memberList );
		return "/member/memberList";  // meberList.html
	}

36차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(1)

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Member List Page</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
        <!-- @5.3.3  integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous" -->
        <!--
            1. 컨테이너 없이 테이블만 작성하면 가로(너비) 길이가 100% 꽉 찬 상태로 보여짐.
            2. 해당 테이블을 감싸주는 div를 만들고 class="container" 이렇게 적용하면 좌우로 적절한 여백이 생김.
        -->
    </head>
    <body>
        <div class="container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Num</th>
                        <th>Name</th>
                        <th>ID</th>
                        <th>Phone</th>
                        <th>Email</th>
                        <th>Modify</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>1</th>
                        <th>홍길동</th>
                        <th>hongkd</th>
                        <th>010-123-4567</th>
                        <th>hongkd@gmail.com</th>
                        <th>수정</th>
                        <th>삭제</th>
                    </tr>
                    <tr>
                        <th>2</th>
                        <th>이순신</th>
                        <th>hongkd</th>
                        <th>010-123-4567</th>
                        <th>hongkd@gmail.com</th>
                        <th>수정</th>
                        <th>삭제</th>
                    </tr>
                    <tr>
                        <th>3</th>
                        <th>감감찬</th>
                        <th>hongkd</th>
                        <th>010-123-4567</th>
                        <th>hongkd@gmail.com</th>
                        <th>수정</th>
                        <th>삭제</th>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>


37차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(2)

padding: 50px 50 50 50
padding: 50px 0
padding: 50px 100(좌우) 150(아래)

 <h3 style="text-align:center; border:1px solid; display:inline-block; padding: 50px">
            <!--h3 class="text-center"-->
                Member List Page
                <small class="text-muted">by Bs v4.x</small>
            </h3>


38차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(3)
<table class="table table-bordered">
<table class="table table-striped">
<table class="table table-dark"> <table class="table table-light">
<table class="table table-bordered table-striped table-borderless">

<style>
        table.table-bordered {
            border: 3px solid green;
        }
        table.table-bordered > thead > tr > th {
            border: 1px solid red;
            background-color:lightblue;
        }
        table.table-bordered > tbody > tr > td {
            border: 2px solid darkmagenta;
        }
    </style>
    <body>
        <div class="container">
            <h3 style="text-align:center; padding:50px">
            <!--h3 class="text-center"-->
                Member List Page
                <small class="text-muted">by Bs v4.x</small>
            </h3>
            <table class="table table-bordered table-striped">


39차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(4)
<thead class="thead-dark">
<thead class="thead-light"> <table class="table table-dark">


        <!--
            1. 컨테이너 없이 테이블만 작성하면 가로(너비) 길이가 100% 꽉 찬 상태로 보여짐.
            2. 해당 테이블을 감싸주는 div를 만들고 class="container" 이렇게 적용하면 좌우로 적절한 여백이 생김.
            3. table-bordered
            4. table-striped
            5. table-dark, bale-light
            6. 테이블 테두리만 보더 색상을 지정하려면?  style="border:5px solid red"
                6-1. 인라인으로 지정. 이때 border-color로 지정
                6-2. border: 5px solid red
            7. 테이블 안쪽의 th, td 보더 색상을 지정하려면?
                7-1. th, td 관련한 별도 css 만들어서 지정.
            8. thead에만 다크 적용도 가능 : class-thead-dark. 물론 반대로 가능
            9. text-center: 글자 가운데 정렬. thead에만 적용하면 thead만 가운데 정렬.
            10. 셀을 묶어주는 colspan 사용도 당연히 가능.
            11. table-hover
            12. table-sm : small. 셀 크기를 컴팩트하고 타이트하게 맞춰줌.
            13. table, tr, td 색상 : class="table-info", "table-danger", "table-success", "table-active", "table-primary", "table-seconday", "table-warning"
            14. 배경색 지정 : class="bg-info", class="bg-danger", class="bg-success",
            -->
    </head>
    <!--style>
        table.table-bordered {
            border: 2px solid green;
        }
        table.table-bordered>thead>tr>th {
            border: 1px solid red;
        }
        table.table-bordered>tbody>tr>td {
            border: 1px solid blue
        }
    </style-->
    <body>
        <div class="container">
            <h3 style="text-align:center; padding:50px">
            <!--h3 class="text-center"-->
                Member List Page
                <small class="text-muted">by Bs v4.x</small>
            </h3>

            <table class="table table-bordered table-striped text-center table-hover table-borderless table-sm">
                <thead class="thead-dark">
                    <tr>
                        <th>Num</th>
                        <th>Name</th>
                        <th>ID</th>
                        <th>Phone</th>
                        <th>Email</th>
                        <th>Modify</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>홍길동</td>
                        <td>hongkd</td>
                        <td>010-123-4567</td>
                        <td class="text-left">hongkd@gmail.com</td>
                        <td>수정</td>
                        <td>삭제</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>이순신</td>
                        <td>hongkd</td>
                        <td>010-123-4567</td>
                        <td class="text-left">hongkd@gmail.com</td>
                        <td>수정</td>
                        <td>삭제</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>감감찬</td>
                        <td>hongkd</td>
                        <td>010-123-4567</td>
                        <td class="text-left">hongkd@gmail.com</td>
                        <td>수정</td>
                        <td>삭제</td>
                    </tr>
                    <tr>
                        <td class="bg-primary">#</td>
                        <td class="bg-info" colspan=4>#</td>
                        <td class="bg-success" colspan=2>#</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>


40차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(5)

셀 내 상하 정렬
<td class="align-middle">010-123-4567</td>
<td class="align-middle text-left">hongkd@gmail.com</td>
<td class="align-top">수정</td>
<td class="align-bottom">삭제</td>


41차시 Bootstrap 테이블 관련 클래스들과 테이블 꾸미기(6)
style 적용 thead, tbody 수직 정렬
 <style>
        .table>thead>tr>th,
        .table>tbody>tr>td {
            vertical-align: middle;
        }
 </style>

1줄만 thead의 속성을 주려면
 <th>3</th>
수직 정렬이 문제 아래와 같이 해준다.
 .table>thead>tr>th,
        .table>thead>tr>td,
        .table>tbody>tr>td,
        .table>tbody>tr>th {
            vertical-align: middle;

====================================================================
Java Spring Boot (스프링부트) 프레임워크 제대로 배우기 Part.4

1차시 Bootstrap 버튼 관련 추가적인 디자인 클래스(1)
2차시 Bootstrap 버튼 관련 추가적인 디자인 클래스(2)
3차시 Bootstrap 버튼 관련 추가적인 디자인 클래스(3)

<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Bootstrap Button Design</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
        <style>
            #btn-span {
                /* width: 120px; */
                padding: 20px;
                height: 5px;
                color: red;
                display:table-cell;
                /* border: 1px solid blue !important; */
                text-align: center;
                vertical-align:middle;
                cursor: pointer;
            }
            #btn-span:hover {
                background: red;
                color: white;
            }
        </style>
    </head>
    <body>
        <div class="container mt-5">
            <h2>Rectangle Button</h2>
            <button class="btn btn-primary rounded-0 mt-2">Member Join</button>

            <h2 class="mt-5">Rectangle Outline Button</h2>
            <button class="btn btn-outline-warning rounded-0 mt-3">← BACK</button>
            <button class="btn btn-outline-info rounded-0 mt-3">MEMBER UPDATE</button> 
            <button class="btn btn-outline-danger rounded-0 mt-3">MEMBER DELETE</button>

            <h2 class="mt-5 mb-3">Span Button</h2>
            <span id="btn-span" class="border border-danger">SPAN BUTTON</span>
        
            <h2 class="mt-5 mb-3">Div(Card) Box</h2>
         
           <div class="card card-body rounded-0 border-info">
                Lorem Ipsum is simply dummy text of the printing and typesetting industry.
                Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,
                when an unknown printer took a galley of type and scrambled it to make a type specimen book.
           </div>
        </div>
    </body>
</html>

4차시 리스트 페이지 뷰 DB 연동하여 구현 완성(1)
5차시 리스트 페이지 뷰 DB 연동하여 구현 완성(2)

[memberList.html]
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Member List Page</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
		
	</head>
	<style>
		.btn-myButton {
			background-color: #00FFFF;
			border: none;
			color: #000;
			padding: 10px 50px;
			margin-bottom: 10px;
			cursor: pointer;
			float: right;
		}
		.btn-myButton:hover {
			background-color: #000;
			color: #FFF;
			transition: all .2s;
			cursor: porinter; /* wait, crosshair, not allowed, zoom-in, grab */
		}
	</style>
	<body>
		<div class="container">
			<h3 style="text-align: center; padding: 50px 0 20">
				Member List Page
				<small class="text-muted">by BS v4.x</small>
			</h3>
			<button class="btn-myButton">Member Join</button>
			<table class="table table-striped text-center table-hover">
				<thead class="thead-dark">
					<tr>
						<th>Num</th>
						<th>Name</th>
						<th>ID</th>
						<th>Phone</th>
						<th>Modify</th>
						<th>Delete</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="row : ${memberList}">
						<td th:text="${row.num}"></td>
						<td th:text="${row.name}"></td>
						<td th:text="${row.id}"></td>
						<td th:text="${row.phone}"></td>
						<td>수정</td>
						<td>삭제</td>
					</tr>
					<tr>
						<td class="bg-primary"></td>
						<td class="bg-info" colspan=3></td>
						<td class="bg-success" colspan=2></td>					
					</tr>
				</tbody>
			</table>
			<div class="text-center">
				<button class="btn btn-primary rounded-0">MEMBER JOIN</button>
			</div>
			<div class="mb-5">
				&nbsp
			</div>
		</div>	  
	</body>
</html>


6차시 리스트 페이지 뷰 DB 연동하여 구현 완성(3) - 수정
		
	<body>
		<div class="container">
			<h3 style="text-align: center; padding: 50px 0 20">
				Member List Page
				<small class="text-muted">by BS v4.x</small>
			</h3>
			
			<button class="btn-myButton" onclick="location.href='/member/memberWriteFormNew';">Member Join</button>
			
			<table class="table table-striped text-center table-hover">
				<thead class="thead-dark">
					<tr>
						<th>Num</th>
						<th>Name</th>
						<th>ID</th>
						<th>Phone</th>
						<th>Modify</th>
						<th>Delete</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="row : ${memberList}">
						<td th:text="${row.num}"></td>
						<td th:text="${row.name}"></td>
						<td th:text="${row.id}"></td>
						<td th:text="${row.phone}"></td>
						<td><a href="#" th:href="@{/member/memberWriteFormNew( num=${row.num} )}" style="color: #85BCA6">수정</a></td>
						<td>삭제</td>
					</tr>
					<tr>
						<td class="bg-primary"></td>
						<td class="bg-info" colspan=3></td>
						<td class="bg-success" colspan=2></td>					
					</tr>
				</tbody>
			</table>
			
			<div class="text-center">
				<button type="button" class="btn btn-outline-warning rounded-0" onclick="history.go(-1);">← BACK</button>
				<button type="button" class="btn btn-outline-secondary rounded-0" onclick="location.href='/';">↑ MAIN</button>
				<button type="button" class="btn btn-primary rounded-0" id="btn-myButton">MEMBER JOIN</button>
			</div>
			
			<div class="mb-5">
				&nbsp;
			</div>
			
			<script>
				// 버튼 가져오기
				const btnMyButton = document.querySelector( '#btn-myButton' );
				console.log( btnMyButton );
				
				// 버튼 클릭 시 --> 할 일 처리
				btnMyButton.addEventListener( 'click', () => {
					location.href = '/member/memberWriteFormNew';
				});
			</script>
		</div>	  
	</body>
</html>


7차시 리스트 페이지 뷰 DB 연동하여 구현 완성(4) - 삭제

여기부터~~~



8차시 fluid 적용 및 삭제 처리 DB연동 구현 이론
9차시 삭제 처리 DB연동 구현 실습(1)
10차시 삭제 처리 DB연동 구현 실습(2)
11차시 삭제 처리 DB연동 구현 실습(3)

[memberController.java]
/*
	 * 회원 삭제 OK (생각보다 생각할게 많네... ㅠ.ㅠ)
	 * 
	 * 		1. Controller 삭제 구현. (삭제 요청에 대한 매핑 처리, num 변수 처리, 응답 메시지 처리 및 이동 url 전달 처리 등등...)
	 *	 	2. 삭제 시 num 값이 null 인지 아닌지 체크. (null이면 redirect)
	 *		3. 여러 에러 상황을 대비하여 try ... catch ~ 구문 사용.
	 *		4. 게시물 삭제 성공 시 전달할 몌시지와 실패 시의 메시지를 각각 전달할 수 있도록 처리.
	 * 		5. 삭제 처리 후 반환값??? --> row의 갯수.
	 * 
	 */
	@GetMapping("/member/memberDeleteOk")
	public String memberDeleteOk ( @RequestParam( value="num", required=false) Integer num, Model model ) {
		
		// null 체크
		if( num == null) {
			System.out.println( "null 입니다." );
			return "redirect:/member/memberList";
			
		}
		System.out.println( num );
		
		// try ... catch ~
		try {
			
			// 삭제에 대한 DB 처리
			// 삭제 처리 후 --> 반환값 리턴
			int isOk = memberService.deleteMember(num);
			System.out.println( "isOk = " + isOk );
			
			// 멤버 삭제 실패 시 처리 구현 (메시지 등을 전달)
			if( isOk != 1) {
				System.out.println( "삭제 실패 = " + isOk );
				// return "redirect:/member/memberList";
				
				// 삭제 실패 시 --> 안내 메시지 및 이동 url 정보를 전달 --> messageAlert.html
				model.addAttribute( "msg", "회원 삭제가 실패되었습니다. 리스트로 이동합니다." );
				model.addAttribute( "url", "/member/memberList" );
			}
			else {
				System.out.println( "삭제 성공 = " + isOk );
				
				// 삭제 성공 시 --> 안내 메시지 및 이동 url 정보를 전달 --> messageAlert.html
				model.addAttribute( "msg", "회원 정보가 삭제되었습니다. 멤버 리스트 페이지로 이동합니다. ^.^" );
				model.addAttribute( "url", "/member/memberList" );
			}
		}
		catch( DataAccessException e ) {
			// DB 처리시 문제가 있나???
			
		}
		catch( Exception e) {
			// 시스템에 문제가 있나???
			
			
		}
		
		return "/member/messageAlert";  // messageAlert.html
	}

[memberService.java]
@Service
public interface MemberService {
	
	public void insertMember( MemberDTO memberDTO );
	public MemberDTO getMemberOne( int num ); 	
	public void updateMember( MemberDTO memberDTO );	
	public List<MemberDTO> getMemberList();
	public int deleteMember( int num );
}


[memberServiceImpl.java]
	/*
	 * DELETE MEMBER ONE
	 * 
	 */
	@Override
	public int deleteMember(int num) {
		
		return memberMapper.deleteMemberOne( num );
	}

[memberMapper.java]
@Mapper
public interface MemberMapper {
	
	public void insertMember( MemberDTO memberDTO );	
	public MemberDTO selectMemberOne( int num );	
	public void updateMember( MemberDTO memberDTO );	
	public List<MemberDTO> selectMemberAll();
	public int deleteMemberOne( int num );
}

[memberMapper.xml]
<delete id="deleteMemberOne" parameterType="int">
		<![CDATA[
			DELETE FROM
				member
			WHERE
				num = #{num};
		]]>
	</delete>

12차시 전체 테스트 및 중복 삭제 리턴값 체크와 autocomplete 옵션 값 넣기
조건에 맞는 다중 레코드 삭제 시 삭제된 레코드 수 반환 (ex. isOk = 3)
autocomplete on/off


13차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기 - 기초개념
웹사이트 레이아웃 - 자바 + 스프링 부트 (SB) - Tymeleaf (지원), jsp (지원 x), mustash
                         (- 파이썬 + jinga? include, body)

template - fragment + fragment

14차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기(1)
Thymeleaf (레이아웃) A (복잡) / B (simple) 2개의 타입, B 중심으로 설명
 
Template 제작 이유
부모의 (tpl_fragments.html) fragment를 자식이 재사용


15차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기(2)

[indexController.java]
package com.testboard2.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class IndexController {

	@GetMapping("/main")
	public String indexMain() {
		
		return "/tpl/tpl_fragments";  // tpl_fragments.html
	}
	
}


[tpl_fragments.html]
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<!-- Required meta tags -->
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	
		<!--  Bootstrap CSS -->
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
		
		<title>tpl_fragment</title>
	</head>
	<body>
		<header class="bg-primary text-center pt-5 pb-5 text-white">
			HEADER
		</header>
		
		<div class='container mt-5 mb-5'>
			<h2>Welcome to my homepage ^.~</h2>
			
		</div>
		
		<footer class="bg-secondary text-center pt-5 pb-5 text-white">
			FOOTER
		</footer>	
	
		<!-- JQuery and Bootstrap Bundle (with Popper) -->
		<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
	    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
	</body>  
</html>

16차시 메타 태그와 viewport 주요 속성들 알아보기
설명:
1. Required meta tags
   - 메타 태그는 항상 <head> 태그 안에 정의.
   - 기본적으로 UTF-8 문자 인코딩 지정 및 반응형 메타 태그 (viewport 메타 태그) 지정을 해주는 편.
   - 부트스트랩은 기본적으로 "모바일 우선"의 CSS 프레임워크이다. 따라서, 모바일 디바이스에 최적화 되어있다.
   - 모바일 외의 디바이스는 CSS 미디어쿼리를 통해서 다양한 디바이스에 응대한다.
   - 따라서, 웹사이트를 개발할 때 다양한 디바이스 환경에 응대하여 부트스트랩을 사용하고자 한다면 반응형 메타 태그 지정은 필수이다.
   - viewport 지정을 안해주면 디바이스가 가로 사이즈를 인식하지 못해서 pc처럼 랜더링하여 출력.
			
2. viewport
   - width=device-width : 디바이스의 화면 너비를 따르게끔 페이지 너비를 설정
   - initial-scale=1 또는 1.0 (추천 및 권장)
	브라우저가 웹페이지 로드 시 초기 "확대 또는 축소" 레벨을 설정.
	즉, 보여지는 화면의 줌(zoom) 수준을 1배율로 설정한다는 의미. 이 값을 올리면 화면 줌이 커짐.
	initial-scale은 한국말로 "초기 화면 배울 설정" 정도로 이해하자. 설정은 줌(zoom) 레벨을 설정한다라는 의미.
	1.0은 100%와 같음.
			
   - user-scalable=no
	no 또는 yes : 사용자가 브라우저의 확대/축소를 가능하게 할 것인지를 설정.
	사용자가 크기 조정하는 것을 원하지 않을 때 사요.
					
- minimum-scale=1.0
	최소 사이즈를 1.0으로 처리.
	최소 사이즈 설정은 사용자가 너무 극단적으로 화면을 축소시키는 것을 못하게 방지.
	초기값과 최소값 배율 설정을 같이 할 수 있음.
					
- maximum-scale=3.0
	최대 사이즈를 3.0으로 처리.
	최대 사이즈 설정은 사용자가 너무 극단적으로 화면을 확대시키는 것을 못하게 방지.
			
- shrink-to-fit=no
	임의 줄임을 방지.
	사파리 특정 버젼에서는 뷰포트 크기가 컨텐츠 내용 보다 작으면 내용을 임의적으로 줄여서 뷰포트 크기에 맞춰서 보여주곤 함.
	이러한 미의 줄임을 방지하기 위해서 "no" 명령어를 사용.

3. http-equiv="refresh"
	새로고침하고 몇 초 후에 지정한 췝사이트로 이동.
	<meta http-equiv="refresh" content="10; url=http://localhost:8080/member/memberList">
		
4. http-equiv="X-UA-Compatible"
   - 랜더링 모드 설정.
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
				
   - 호환성 보기 모드
	MS에서 만든 익스클로러 브라우저는 호환성 보기 모드가 있어서 올드한 IE에서는 컨텐츠가 정상적으로 출력되지 않을 수 있음.
	사실 최신 브라우저 위주로만 쓰는 환경(또는 고려한다면)에서라면 이런 메타 태그는 쓸 필요가 없음.
	구 브라우저들 때문에 필요한 태그 정도라고 생각하면 됨.
	IE=9 또는 8 식으로 특정 버젼을 명시할 수 있으나 편하게 IE=edge로 지정하여 항상 최신 표준 모드로 랜더링 하도록 설정한다.
	최근까지는 세미콜론(;) 붙여주고 뒤에 crome=1을 추가해서 사용.
	지금은 IE=edge 만 작성해줘도 됨.


17차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기(3)
18차시 Thymeleaf를 이용한 웹사이트 템플릿 레이아웃 만들기(4)

[indexController.java]
@Controller
public class IndexController {

	@GetMapping("/fragments")
	public String indexFragments() {
		
		return "/tpl/tpl_fragments";  // tpl_fragments.html
	}
	
	@GetMapping("/main")
	public String indexMain() {
		
		return "/tpl/tpl_main";  // tpl_main.html
	}
	
	@GetMapping("/sub")
	public String indexSub() {
		
		return "/tpl/tpl_sub";  // tpl_sub.html
	}
	
}

[tpl_fragment.html]
	<head th:fragment="tpl_head">
	</head>

	<body>
		<header th:fragment="tpl_header" class="bg-primary text-center pt-5 pb-5 text-white">
			HEADER
		</header>
				
		<footer th:fragment="tpl_footer" class="bg-secondary text-center pt-5 pb-5 text-white">
			FOOTER
		</footer>	
         </body>	
	

[tpl_main.java]
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

	<head th:replace="/tpl/tpl_fragments :: tpl_head" />
	
	<body>
	
		<header th:replace="/tpl/tpl_fragments :: tpl_header" />
		
		<div class="container mt-5 mb-5">
			<h3>Main Page</h3>
		</div>
		
		
		<footer th:replace="/tpl/tpl_fragments :: tpl_footer" />
	</body>
</html>


19차시 템플릿 파일 요청시 파라미터 (1개) 값 넘기기
	<head th:fragment="tpl_head( title )"
		<!--title th:text="${title}">tpl_fragment</title-->
		<title>[[${title}]]</title> // 이렇게도 가능
	</head>

	<head th:replace="/tpl/tpl_fragments :: tpl_head( title='메인 페이지' )" />
        <head th:replace="/tpl/tpl_fragments :: tpl_head( title='서브 페이지' )" />


	<head th:replace="/tpl/tpl_fragments :: tpl_head( '메인 페이지' )" />  // 값만 넘겨도 됨.
	<head th:fragment="tpl_head( title )"  받는 곳에서 title로 받음
	

20차시 템플릿 파일 요청시 파라미터 (2개) 값 넘기기
	parameter를 안 넘기면 에러 <head th:replace="/tpl/tpl_fragments :: tpl_head()" /> or tpl_head
         ''의 경우 경로를 표시 <head th:replace="/tpl/tpl_fragments :: tpl_head( '' )" />

[tpl_fragments.html]
<div th:fragment="tpl_main_title( val1, val2 )" class="container mt-5 mb-5">
	<h2 th:if= "${val2 != ''}" th:text="${val1} + ' - ' + ${val2}">Welcome to my homepage ^.~</h2>
	<h2 th:unless="${val2 != ''}" th:text="${val1}" />		
</div>

[tpl_main.html]
<div th:replace="/tpl/tpl_fragments :: tpl_main_title( 'Main Page', '' )" class="container mt-5 mb-5">
	<h3>Main Page</h3>
</div>


[tpl_sub.html]
<div  th:replace="/tpl/tpl_fragments :: tpl_main_title( 'Sub Page', 'Event' )" class="container mt-5 mb-5" >
	<h3>Sub Page</h3>
</div>


21차시 최상단 네비게이션 탑메뉴 구현 및 선택된 메뉴 클래스 적용하기(1)




22차시 최상단 네비게이션 탑메뉴 구현 및 선택된 메뉴 클래스 적용하기(2)
23차시 최상단 네비게이션 탑메뉴 구현 및 선택된 메뉴 클래스 적용하기(3)
24차시 최상단 네비게이션 탑메뉴 구현 및 선택된 메뉴 클래스 적용하기(4)


25차시 최상단 네비게이션 탑메뉴에 classappend 적용하기


26차시 Dialect을 이용한 Thymeleaf Layout 만들기(1)
27차시 Dialect을 이용한 Thymeleaf Layout 만들기(2)
28차시 Dialect을 이용한 Thymeleaf Layout 만들기(3)


29차시 Layout Decorator 경고 나오는거 수정하기












MemberController.java
package com.testboard2.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.testboard2.dto.MemberDTO;
import com.testboard2.service.MemberService;

import jakarta.servlet.http.HttpServletRequest;


@Controller
public class MemberController {

	
	/*
	 * DI
	 * 
	 */
	@Autowired
	private MemberService memberService;

	
	/*
	 * 회원 등록 Form 페이지 + 회원 수정 Form
	 * 
	 */
	@GetMapping("/member/memberWriteForm")
	public String memberWriteForm( 
			@RequestParam( value="num", required=false ) Integer num,
			Model model ) {
		
		if( num != null ) {
			
			System.out.println( num );
			MemberDTO m1 = memberService.getMemberOne( num );
			
			if( m1 == null ) {
				
				model.addAttribute( "msg", "회원 정보가 없습니다. 메인 페이지로 이동합니다." );
				model.addAttribute( "url", "/" );
				
				return "/member/messageAlert";  // messageAlert.html
			}
			
			// 잘 되는지 콘솔에 출력
			System.out.println( m1.getName() );
			System.out.println( m1.getId() );
			System.out.println( m1.getPhone() );
			
			// Form 페이지로 m1 객체를 전달 --> 모델(model)
			model.addAttribute( "memberDTO", m1 );
			model.addAttribute( "formTitle", "Modification" );
			model.addAttribute( "num", num );
			
		}
		else {
			
			System.out.println( "null 입니다." );
			
			// 등록 처리(신규 회원)
			model.addAttribute( "memberDTO", new MemberDTO() );
			model.addAttribute( "formTitle", "Registration" );
			
		}

		return "/member/memberWriteForm"; // memberWriteForm.html
	}

	
	/*
	 * 회원 등록 Ok
	 * 
	 */
	@PostMapping("/member/memberWriteOk")
	public String insertMember(
			MemberDTO m1, 
			Model model ) {

		try {
			// 등록 처리
			System.out.println(m1.getName());
			System.out.println(m1.getId());
			System.out.println(m1.getPhone());

			memberService.insertMember(m1);
			
			// 등록 안내 메시지 출력
			model.addAttribute( "msg", "회원 등록이 처리되었습니다. 메인 페이지로 이동합니다." );
			model.addAttribute( "url", "/" );
			
			return "/member/messageAlert";  // messageAlert.html
			
		} catch (Exception e) {
			// err
		}

		return "redirect:/";
	}
	

	/*
	 * 회원 수정 Ok
	 * 
	 */
	@PostMapping("/member/memberUpdateOk")
	public String updateMember(
			MemberDTO m1, 
			HttpServletRequest request,
			Model model ) {
		
		String num_ = request.getParameter("num");
		int num = Integer.parseInt(num_);
		
		try {
			// 수정 처리
			System.out.println(m1.getName());
			System.out.println(m1.getId());
			System.out.println(m1.getPhone());
			System.out.println( "넘어온 번호는 = " + num );

			memberService.updateMember(m1);
			
			model.addAttribute( "msg", "회원 정보가 수정되었습니다. 확인 페이지로 이동합니다. ^.~" );
			model.addAttribute( "url", "/member/memberWriteForm?num=" + num );
			
			return "/member/messageAlert";  // messageAlert.html
			
		} catch (Exception e) {
			// err
		}

		return "redirect:/member/memberWriteForm?num=" + num;
	}
}

memberWritForm.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Member Registration Form</title>
		<style>
			form > label {
				display: inline-block;
				width: 120px;
			}
			form > input {
				padding: 4px;
				margin-bottom: 4px;
			}
		</style>
	</head>
	<body>
		<!-- <h1>Member <span th:text="${formTitle}">Registration</span> Form</h1> -->
		<!-- 
				th:if 조건문 설명:
					1. 기본적으로 if 구문을 사용해서 조건을 비교해도 되고, unless 구문을 사용해도 가능.
					2. 다소 직관적이지 못하고 헷갈릴 수 있음. (처음 사용자)
					3. if 구문을 사용하는게 보다 직관적이고, unless 구문을 사용하면 다소 직관적이지 못하게 느낄 수 있음.
					4. th:unless 구문은 if문과 조건이 동일하지만 if 조건이 아닌 다른 조건의 경우를 찾음.
					5. ~하지 않는 한, ~한 경우[때] 외에는...
		-->
		<h1>Member
		
				<!-- 다중 if 구문 사용 -->
				<!--
				<span th:if="${formTitle} == 'Registration'" th:text="${formTitle}"></span>
				<span th:if="${formTitle} == 'Modification'" th:text="${formTitle}"></span>				
				-->
				
				<!-- if ... unless 구문 사용 -->
				<span th:if="${formTitle} == 'Modification'" th:text="${formTitle}"></span>
				<span th:unless="${formTitle} == 'Modification'" th:text="${formTitle}"></span>			  
		Form</h1>
		
		<!-- form action="#" th:action="@{/member/memberWriteOk}" th:object="${memberDTO}" method="POST">  -->
		<!-- 삼항연산자 구문을 사용하여 "등록" 시와 "수정" 시 액션 주소 다르게 처리  -->
		<form
			th:object="${memberDTO}"
			th:action="${formTitle != 'Registration' ? '/member/memberUpdateOk' : '/member/memberWriteOk'}"
			method="POST"
			id="memberWriteForm">
			<input type="hidden" name="num" th:if="${formTitle} == 'Modification'" th:value="${num}">  
			<!-- 수정일 때 필요, 등록일 때는 필요 없음 → th:if 사용 -->
			
			<label for="name">Name</label>
			<input type="text" id="name" name="name" th:field="*{name}">
			<br>
			
			<label for="id">ID</label>
			<input type="text" id="id" name="id" th:field="*{id}">
			<br>
			
			<label for="phone">Phone</label>
			<input type="text" id="phone" name="phone" th:field="*{phone}">
			<br><br>
			
			<!-- input type="submit" value=" Submit "> <input type="reset" value=" Reset " -->
			<!-- 
					설명:
					form 태크안에 button 태그로 버튼을 만드는 경우와 바깥쪽에 만드는 경우 주의사항?
							1. 폼 태그 안쪽에 만드는 경우 ... type="submit" 지정만 해주면 됨
							2. 폼 태그 바깥에 만드는 경우 ... 폼 요소에 id 지정 후 버튼 태그에 해당 id를 명시해준다. 안해주면 아예 클릭이 안됨.
			 -->
			 
		</form>
		
		<!--  1번 방식 : 다중 if 구문 사용 -->
		<!--  
		<button type="submit" form="memberWriteForm" th:if="${formTitle} == 'Registration'">회원등록</button>
		<button type="submit" form="memberWriteForm" th:if="${formTitle} == 'Modification'">회원수정</button>
		<button type="submit" form="memberWriteForm" th:if="${formTitle} == 'Deletion'">회원삭제</button>
		--> 
		
		<!--  2번 방식 : if ... else 구문과 같은 효과는? if ... unless 구문 사용 -->
		<!--  한가지 주의할 점은 if 조건과 unless 조건을 동일하게 명시해줘야 함  -->
		<!--
		<button type="submit" form="memberWriteForm" th:if="${formTitle} == 'Registration'">회원등록</button>
		<button type="submit" form="memberWriteForm" th:unless="${formTitle} == 'Registration'">회원수정</button>
		--> 
		 
		<!--  3번 방식 : if ... else 구문과 같은 효과는? switch 구문 사용 -->
		<div th:switch="${formTitle}">
			<button type="submit" form="memberWriteForm" th:case="Registration">회원등록</button>
			<button type="submit" form="memberWriteForm" th:case="Modification">회원수정</button>
			<button type="submit" form="memberWriteForm" th:case="Deletion">회원삭제</button>		
		</div>
		 
	</body>
</html>

MemberService.java
package com.testboard2.service;

import org.springframework.stereotype.Service;

import com.testboard2.dto.MemberDTO;

@Service
public interface MemberService {
	
	public void insertMember( MemberDTO memberDTO );
	
	public MemberDTO getMemberOne( int num ); 
	
	public void updateMember( MemberDTO memberDTO );

}


MemberServiceimpl.java
package com.testboard2.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.testboard2.dto.MemberDTO;
import com.testboard2.mapper.MemberMapper;

@Service
public class MemberServiceImpl implements MemberService {

	/*
	 * DI
	 * 
	 */
	@Autowired
	private MemberMapper memberMapper;
	
	@Override
	public void insertMember( MemberDTO memberDTO) {
		
		memberMapper.insertMember( memberDTO );
	}
	
	/*
	 * SELECT MEMBER ONE
	 * 
	 */
	@Override	
	public MemberDTO getMemberOne( int num ) {
		
		return memberMapper.selectMemberOne( num );
	}
	
	/*
	 * UPDATE
	 * 
	 */
	@Override	
	public void updateMember( MemberDTO memberDTO ) {
		
		memberMapper.updateMember( memberDTO );
	}
	
}

[MemberMapper.java]
package com.testboard2.mapper;

//import java.util.List;

import org.apache.ibatis.annotations.Mapper;

import com.testboard2.dto.MemberDTO;

@Mapper
public interface MemberMapper {
	
	public void insertMember( MemberDTO memberDTO );
	
	public MemberDTO selectMemberOne( int num );
	
	public void updateMember( MemberDTO memberDTO );
	
//	public List<MemberDTO> selectMemberAll();
//	public int deleteMemberOne( int num );
}

[MemberMapper.xml]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.testboard2.mapper.MemberMapper">
	
	<insert id="insertMember" parameterType="MemberDTO">
		<!-- INSERT INTO member (name, id, phone) VALUES ( '이순신', 'mr.soon', '010-111-2222' ); -->	
		<![CDATA[
			INSERT INTO member ( 
			  	  name
				, id
				, phone 
			) VALUES ( 
			  	  #{name}
				, #{id}
				, #{phone} 
			);
		]]>
	</insert>
	
	<select id="selectMemberOne" parameterType="int" resultType="MemberDTO">
		<![CDATA[
			SELECT 
				* 
			FROM 
				member 
			WHERE 
				num = #{num};	
		]]>
	</select>
	
	<update id="updateMember" parameterType="MemberDTO">
		<![CDATA[
			UPDATE
				member
			SET
				  name = #{name}
				, id = #{id}
				, phone = #{phone}
			WHERE
				num = #{num};
		]]>
	</update>
	
</mapper>
<!-- 
		UPDATE
				member
			SET
				  name = #{name}
				, id = #{id}
				, phone = #{phone}
			WHERE
				num = #{num};
				 -->

[messageAlert]
<!DOCTYPE html>
<html xmlms:th="http://www/thymeleaf.org">
	<head>
		<meta charset="UTF-8">
		<title>Error Message Page</title>
	</head>
	<body>
	
		<!-- 
			설명 : 
			타임리프에서 넣어온 모델 데이터 값을 변수로 사용하려면?
				1. th:inline 자바스크립트 선언
				2. CDATA 선언
				3. default 명시
				4. 변수 값 처리를 타임리프 문법에 맞게 작성하여 처리.
				5. 뷰 페이지가 jsp인 경우는 조금 다르다. 아래의 뷰 페이지는 타임리프(.html)로 사용하는 경우. 
		 -->
		 <script th:inline="javascript">
		 /* <![CDATA[ */
			 
		 	const message = /*[[ ${msg} ]]*/ 'default';
		 	const url = /*[[ ${url} ]]*/ 'default';
		 	
		 	alert( message );
		 	document.location.href = url;
			 
		 /*]]*/
		 </script>
	</body>
</html>