1. Spring Boot란?
Spring Boot는 Spring Framework를 기반으로 한 경량화된 프레임워크로, 복잡한 설정 없이 빠르게 애플리케이션을 개발할 수 있도록 도와줍니다.

📌 Spring Boot의 주요 특징
자동 설정(Auto Configuration): 복잡한 설정 없이 기본값으로 자동 설정됨
독립 실행 가능(Standalone Application): 내장 웹 서버(Tomcat, Jetty 등) 포함 가능
Spring과의 강력한 통합: 기존 Spring 생태계를 간편하게 사용 가능
Gradle 및 Maven 빌드 지원: 본 강의에서는 Gradle을 사용하여 프로젝트를 설정합니다.
2. Spring Boot 프로젝트 구조
Spring Boot 프로젝트는 일반적으로 다음과 같은 구조로 구성됩니다.

my-springboot-app/
 ├── src/main/java/ (애플리케이션 코드)
 ├── src/main/resources/ (설정 파일, 정적 리소스)
 ├── build.gradle (Gradle 설정 파일)
 ├── application.properties (환경 설정 파일)
3. Spring Boot의 주요 Annotation
Spring Boot는 다양한 애노테이션을 제공하여 설정 및 제어를 간편하게 합니다.

✅ 필수 애노테이션
애노테이션설명@SpringBootApplicationSpring Boot 애플리케이션의 시작점@RestControllerRESTful 웹 서비스를 만들 때 사용@RequestMapping특정 URL과 컨트롤러 메서드를 매핑@GetMappingHTTP GET 요청을 처리@PostMappingHTTP POST 요청을 처리@PutMappingHTTP PUT 요청을 처리@DeleteMappingHTTP DELETE 요청을 처리@ResponseBody컨트롤러의 메서드 반환 값을 HTTP 응답 본문으로 변환

🛠 예제 코드
@RestController
@RequestMapping("/hello")
public class HelloController {
    @GetMapping
    public String sayHello() {
        return "Hello, Spring Boot!";
    }
}
위 코드에서 @RestController는 컨트롤러 클래스임을 나타내며, @GetMapping은 GET 요청을 처리하는 엔드포인트를 정의합니다.

@ResponseBody는 @RestController 내부에서는 자동 적용되지만, 일반적인 @Controller 클래스에서 사용하면 메서드 반환값을 JSON 형식으로 변환하는 역할을 합니다.

4. 요약
Spring Boot는 Spring Framework를 보다 쉽게 사용할 수 있도록 제공된 프레임워크이다.
@SpringBootApplication, @RestController, @RequestMapping 등의 주요 애노테이션을 이해하고 활용할 수 있다.
Gradle을 이용해 Spring Boot 프로젝트를 설정하고 실행하는 방법을 익힌다





1. 개발 환경 선택
Spring Boot 개발을 시작하기 위해 필요한 도구를 선택합니다.

📌 필수 도구
IntelliJ IDEA (Community Edition)
JDK 17 이상 (권장: OpenJDK)
Gradle (별도 설치 없이 IntelliJ에서 자동 지원)
Spring Initializr (https://start.spring.io/)
2. Spring Initializr를 이용한 프로젝트 생성
IntelliJ에서 직접 프로젝트를 생성하는 대신 Spring Initializr를 활용하여 프로젝트를 시작합니다.

3. 프로젝트 실행
IntelliJ에서 프로젝트를 연 후, MyApplication.java 파일을 실행하면 기본 서버가 실행됩니다.

@SpringBootApplication
public class MyApplication {
    public static void main(String[] args) {
        SpringApplication.run(MyApplication.class, args);
    }
}

JDK 설정 - 오른쪽 위 톱니바퀴 JDK 선택




1. 첫 API 만들기
Spring Boot에서 간단한 API를 만들어보며 프로젝트 구조를 익혀봅니다.

✅ 목표
Spring Boot에서 컨트롤러를 생성하는 방법을 배운다.
📌 구현 과정
간단한 GET API 추가
@RestController
@RequestMapping("/api")
public class HelloController {
    @GetMapping("/hello")
    public String sayHello() {
        return "Hello, Spring Boot!";
    }
}
2. Git 초기화 및 커밋
프로젝트를 Git으로 관리하기 위해 Git을 설정하고 초기 커밋을 진행합니다.

✅ 목표
Git을 설정하여 코드 이력을 관리할 수 있도록 한다.
📌 Git 설정 과정
Git 초기화
git init
변경 사항 추가 및 커밋
git add .
git commit -m "feat: 첫 API 및 Git 초기화"
github
https://github.com/zero-code-zero/BookRental.git






학습 목표:

RESTful API의 개념과 설계 원칙 이해.
Spring Boot로 REST API 시작 준비.
1. REST란?정의: 자원을 URI로 표현하고 HTTP 메서드로 조작하는 설계 스타일.

핵심 원칙:
자원 중심: /books처럼 명사 사용.
HTTP 메서드: GET(조회), POST(생성).
상태 비저장: 요청 독립성 유지.
비유: "도서관에서 책을 URI로 찾고, 메서드로 빌리기."
2. RESTful API 설계 예시도서 관리:

GET /books: 모든 책 조회.
POST /books: 새 책 생성.
GET /books/1: ID 1번 책 조회.
설계 팁:
URI 간결: /books/{id} (O), /getBooks (X).
상태 코드: 200(성공), 201(생성).
3. Spring Boot 환경 설정도구: IntelliJ IDEA

설정:
IntelliJ: Spring Initializr로 spring-boot-starter-web 추가.
pom.xml
<dependency>

<groupId>org.springframework.boot</groupId>

<artifactId>spring-boot-starter-web</artifactId>

</dependency>

4. 첫 REST API 구현코드:

@RestController

public class HelloController {

@GetMapping("/hello")

public String sayHello() {

return "Hello, REST!";

}

}

실행: http://localhost:8080/hello → "Hello, REST!".
설명: @RestController로 JSON 응답 처리.
5. 실습 과제/hello API 만들고 Postman으로 테스트.

질문: "GET과 POST의 역할 차이는?"


학습 목표:

GET과 POST로 도서 API 구현.
테스트로 기능 검증.
1. 도서 모델 정의코드:

public class Book {

private Long id;

private String title;
// Getter, Setter (Lombok @Data 추천)

}

설명: 도서 데이터를 위한 POJO 설계.
2. 도서 조회 API (GET)코드:

@RestController

@RequestMapping("/books")

public class BookController {

private final List<Book> books = new ArrayList<>();



@GetMapping

public List<Book> getBooks() {

return books;

}

}

실행: GET /books → [] (빈 리스트).
3. 도서 생성 API (POST)코드:

@PostMapping

public ResponseEntity<Book> createBook(@RequestBody Book book) {

book.setId((long) (books.size() + 1));

books.add(book);

return ResponseEntity.status(HttpStatus.CREATED).body(book);

}

설명:
@RequestBody: JSON을 Book으로 변환.
ResponseEntity: 201 상태 코드 반환.
실행:
Postman: POST /books에 {"title": "Test"} → {"id": 1, "title": "Test"}.
4. 실습 과제

﻿GET /books와 POST /books 구현 후 Postman 테스트.
테스트 코드로 생성 API 검증.
질문: "201 Created와 200 OK의 차이는?"







1. IoC (Inversion of Control)란?
IoC는 객체의 생성과 관리를 개발자가 직접 하는 것이 아니라, 프레임워크나 컨테이너가 대신 수행하도록 하는 개념입니다.

IoC의 주요 개념
제어의 역전: 객체의 생성과 생명 주기를 직접 관리하는 것이 아니라 컨테이너(Spring)가 담당합니다.
Spring IoC 컨테이너: ApplicationContext를 활용하여 빈(Bean) 객체를 관리합니다.
의존성 관리: 애플리케이션에서 객체 간의 의존성을 컨테이너가 자동으로 관리하여 결합도를 낮춥니다.
2. DI (Dependency Injection)란?
DI는 객체 간의 의존성을 주입하는 방식입니다. 즉, 객체가 필요한 의존성을 직접 생성하는 것이 아니라 외부에서 주입받습니다.

DI의 주요 개념
의존성 제거: 객체 간의 강한 결합을 줄여 코드의 유연성을 증가시킵니다.
테스트 용이성: 모의 객체(Mock)를 활용하여 단위 테스트가 쉽습니다.
유지보수성 증가: 코드 변경 시 영향도를 줄여 유지보수가 편리합니다.
DI 방식
생성자 주입: 생성자를 통해 의존성을 주입하는 방식 (권장)
세터 주입: Setter 메서드를 통해 의존성을 주입하는 방식
필드 주입: 필드에 직접 주입하는 방식 (테스트 및 유지보수 어려움으로 비추천)
3. IoC와 DI를 활용하는 이유
객체 관리의 자동화: 개발자가 객체를 직접 관리하지 않아도 됨
유지보수성 향상: 코드 수정 시 다른 부분에 미치는 영향을 최소화
테스트 가능성 증가: 의존성 주입을 활용하여 독립적인 단위 테스트 수행 가능


1. 서비스 계층이란?
서비스 계층(Service Layer)은 비즈니스 로직을 처리하는 핵심 계층으로, 컨트롤러와 데이터 접근 계층 사이에서 역할을 합니다.

2. 서비스 계층이 필요한 이유
비즈니스 로직의 분리: 컨트롤러가 지나치게 많은 로직을 가지지 않도록 방지
재사용성 증가: 여러 컨트롤러에서 같은 로직을 재사용 가능
유지보수성 향상: 로직이 한 곳에 집중되어 있어 변경이 용이함
테스트 용이: 서비스 계층을 단위 테스트하기 쉬움
3. 서비스 계층의 역할
(1) 비즈니스 로직 처리
핵심적인 업무 규칙을 구현
여러 데이터 조작 로직을 하나의 트랜잭션으로 묶음
(2) 데이터 접근 계층과 분리
데이터 저장을 List를 활용하여 관리
데이터를 조회, 추가, 수정, 삭제하는 기능 수행
4. 서비스 계층 설계 예제
(1) 컨트롤러가 서비스 계층 없이 직접 데이터를 관리하는 경우 (문제점)
@RestController
@RequestMapping("/books")
public class BookController {
    private final List<Book> books = new ArrayList<>();

    @PostMapping
    public Book createBook(@RequestBody Book book) {
        book.setId((long) (books.size() + 1));
        books.add(book);
        return book;
    }
}
(2) 서비스 계층을 도입한 경우 (권장되는 방식)
@Service
public class BookService {
    private final List<Book> books = new ArrayList<>();

    public Book createBook(Book book) {
        book.setId((long) (books.size() + 1));
        books.add(book);
        return book;
    }

    public Book updateBook(Long id, Book updateBook) {
        for (Book book : books) {
            if (book.getId().equals(id)) {
                book.setTitle(updateBook.getTitle());
                return book;
            }
        }
        return null;
    }
}
@RestController
@RequestMapping("/books")
public class BookController {
    private final BookService bookService;

    public BookController(BookService bookService) {
        this.bookService = bookService;
    }

    @PostMapping
    public Book createBook(@RequestBody Book book) {
        return bookService.createBook(book);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Book> updateBook(@PathVariable Long id, @RequestBody Book updateBook) {
        Book updated = bookService.updateBook(id, updateBook);
        if (updated != null) {
            return ResponseEntity.ok(updated);
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }
}
6. 정리
서비스 계층은 컨트롤러와 데이터 접근 계층을 분리하는 역할을 한다.
비즈니스 로직을 서비스 계층에서 처리하면 코드의 유지보수성과 재사용성이 향상된다.
서비스 계층을 단위 테스트하면 안정적인 애플리케이션 개발이 가능하다.



1.프로젝트 패키지 변경
Rename 패키지, Rename 테스트 패키지
setting.gradle의 rootProject.name = 'NewProjectName'
폴더 변경
Application 클래스명 변경하기
2.인텔리제이 프로젝트 다시 열기
Close Project
프로젝트 삭제
프로젝트 열기


JPA
JPA와 H2 데이터베이스

■ JPA와 H2 데이터베이스 연결 - JPA와 ORM 기초

1. ORM이란 무엇인가?
ORM: 객체(Object)를 관계형(Relational) 데이터베이스에 매핑(Mapping)해주는 기술
즉, Java 객체를 그대로 DB에 저장하고 조회할 수 있도록 중간 역할을 해주는 도구
SQL 직접 작성 불필요 (단순 CRUD는 코드만으로 처리 가능)
유지보수 편리 (도메인 변경 시 SQL 변경 최소화)
타입 안전성과 자동화 지원

3. 문자열 쿼리와 JPA의 비교
기존에는 SQL을 문자열로 작성했기 때문에, 다음과 같은 문제가 발생하곤 했습니다:

// 예: 문자열 기반 쿼리 (MyBatis 등)
String sql = "SELECT * FROM books WHERE titlee = ?";
오타가 있어도 IDE가 알려주지 않음
컴파일 통과 → 실행 시점에야 오류 발생
테스트 코드로 쿼리 검증이 어려움
하지만 JPA는 다르다

List<Book> findByTitle(String title);
메서드명이 곧 쿼리
IDE 자동완성 및 컴파일 오류 체크 가능
테스트로 직접 확인 가능


1. H2 데이터베이스 설정
1.1 Gradle 의존성 추가
build.gradle 파일에 다음 의존성을 추가합니다.

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
}

1.2 application.yml 설정
spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
  h2:
    console:
      enabled: true

ddl-auto: create는 실행할 때마다 테이블을 새로 생성합니다.
show-sql: true는 실행되는 쿼리를 로그에 출력합니다.
H2 콘솔을 통해 테이블 데이터를 직접 확인할 수 있습니다.

2. 도메인 모델 작성
2.1 Book 엔티티
@Entity
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    // getter/setter
}

2.2 Repository 작성
public interface BookRepository extends JpaRepository<Book, Long> {
    List<Book> findByTitle(String title);
}

3. 데이터 저장과 조회 테스트
CommandLineRunner를 통해 애플리케이션 실행 시 데이터를 저장하고 로그로 출력해볼 수 있습니다.

@Bean
CommandLineRunner runner(BookRepository bookRepository) {
    return args -> {
        bookRepository.save(new Book("Spring Boot 시작하기"));
        bookRepository.findAll().forEach(book -> System.out.println(book.getTitle()));
    };
}

💻 H2 콘솔 사용법
Spring Boot 설정으로 H2 콘솔을 활성화해두면 웹 브라우저에서 데이터베이스에 직접 접속해서 테이블과 데이터를 확인할 수 있습니다.

▶ 접속 방법
서버 실행 후, 브라우저에서 http://localhost:8080/h2-console 로 접속합니다.
다음 정보를 입력하고 로그인합니다:
JDBC URL: jdbc:h2:mem:testdb
User Name: sa
Password: (비워둠)
접속 후 왼쪽의 테이블 목록에서 BOOK을 클릭하면, 저장된 데이터를 직접 조회하거나 SQL을 실행해볼 수 있습니다.


JPA와 H2 데이터베이스 연결 - H2 DB 설정 및 엔티티 추가
JPA와 H2 데이터베이스 연결 - JPA의 메서드 기반 쿼리
JPA와 H2 데이터베이스 - 쿼리 로깅과 Logback 설정


1. 개요
JPA의 가장 큰 장점 중 하나는 복잡한 SQL을 직접 작성하지 않고도 메서드 이름만으로 원하는 데이터를 조회할 수 있다는 점이다. 이를 메서드 기반 쿼리(Query Methods) 라고 한다.

2. Book 엔티티 예시
@Entity
public class Book {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String author;
    private LocalDate publishedDate;

    // 기본 생성자, 생성자, Getter 생략
}
3. Repository 예시
public interface BookRepository extends JpaRepository<Book, Long> {
    List<Book> findByAuthor(String author);
    List<Book> findByTitleContaining(String keyword);
    List<Book> findByPublishedDateAfter(LocalDate date);
}
4. 장단점 요약
✅ 장점
SQL 작성 없이 빠르게 개발 가능
간단한 조건에 매우 적합
가독성이 뛰어남
⚠️ 단점
조건이 복잡해지면 메서드명이 지나치게 길어짐
AND, OR, BETWEEN, ORDER BY 등이 섞이면 가독성 하락
조건 분기 처리가 불가능하므로 동적 쿼리에는 부적합


1. 로그 설정의 필요성
JPA는 내부적으로 SQL 쿼리를 생성해 데이터베이스와 통신합니다. 하지만 이 쿼리는 기본적으로 콘솔에 보이지 않기 때문에 개발 중 디버깅이나 최적화를 위해 쿼리 로그를 출력하는 설정이 필요합니다.

2. application.yml 설정
아래 설정을 src/main/resources/application.yml에 추가합니다:

spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    show-sql: false
    properties:
      hibernate:
        format_sql: true

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: trace
옵션 설명
show-sql: false: Hibernate의 System.out 출력을 막고 로깅 설정에 따라 출력
format_sql: true: SQL을 보기 좋게 정렬
org.hibernate.SQL: 실행되는 SQL 쿼리 출력
org.hibernate.orm.jdbc.bind: 바인딩된 파라미터 출력 (TRACE 수준 필요)
3. 실행 결과 예시
설정 후 실행하면 아래와 같은 로그가 출력됩니다:

Hibernate: insert into book (title, author, published_date) values (?, ?, ?)
TRACE org.hibernate.orm.jdbc.bind: binding parameter [1] as [VARCHAR] - '홍길동'
TRACE org.hibernate.orm.jdbc.bind: binding parameter [2] as [DATE] - 2024-01-10
Hibernate가 생성한 SQL 쿼리와 실제 바인딩된 값이 함께 출력되어 디버깅과 분석이 쉬워집니다.



4. 마무리
이번 강의에서는 Hibernate의 기본 로깅 기능을 활용하여 JPA 쿼리를 콘솔에 출력하는 방법을 알아보았습니다. 별도의 외부 라이브러리 없이도 SQL 및 바인딩 정보를 확인할 수 있어 실무에서도 매우 유용한 설정입니다.








클래스 소개 - 클래스 기획 의도 및 목표 안내
Spring Boot 시작하기
Spring Boot 시작하기

Spring Boot 시작하기 - Spring Boot와 Annotation 기초
Spring Boot 시작하기 - 개발 환경 설정
Spring Boot 시작하기 - 첫 API & Git init


Spring Boot 시작하기
RESTful API 기초

RESTful API 기초 - RESTfull API 개념과 설계
RESTful API 기초 - 도서 조회와 생성 API
RESTful API 기초 - 도서 수정과 삭제 API
RESTful API 기초 - /books/ API 테스트


Spring Core
Spring Core와 계층 구조

Spring Core와 계층 구조 - IoC와 DI 이해
Spring Core와 계층 구조 - 서비스 계층
Spring Core와 계층 구조 - 서비스 계층 테스트
(선택) - 프로젝트 이름 변경


JPA
JPA와 H2 데이터베이스

JPA와 H2 데이터베이스 연결 - JPA와 ORM 기초
JPA와 H2 데이터베이스 연결 - H2 DB 설정 및 엔티티 추가
JPA와 H2 데이터베이스 연결 - JPA의 메서드 기반 쿼리
JPA와 H2 데이터베이스 - 쿼리 로깅과 Logback 설정


Exception
예외 처리와 유효성 검사

예외 처리와 유효성 검사 - 예외 처리 기초
예외 처리와 유효성 검사 - 커스텀 예외 구현
예외 처리와 유효성 검사 - 유효성 검사 1
예외 처리와 유효성 검사 - 유효성 검사 2


JPA Entity & 대여 API와 DTO
JPA 연관관계 기초와 실전 활용: 도서 대여 예제로 배우기

JPA 관계 설정 - JPA 연관관계 기초와 단방향 매핑
JPA 관계 설정 - 도서 대여 로직 구현과 예외 처리

Transaction
트랜잭션과 도서반납

트랜잭션과 반납 - 트랜잭션 기초
트랜잭션과 반납 - 반납로직과 트랜잭션
트랜잭션과 반납 - 서비스 테스트
트랜잭션과 반납 - 컨트롤러 테스트

MariaDB
H2에서 MariaDB로 전환

H2에서 MariaDB로 전환 - 데이터베이스 설치
H2에서 MariaDB로 전환 - MariaDB 설정과 연결 및 확인

REST API 고급
REST API 고급

REST API 고급 - 페이지네이션
REST API 고급 - 필터링과 정렬
REST API 고급 - 캐싱

심화
성능 최적화

성능 최적화 - Redis
성능 최적화 - 더미 데이터
성능 최적화 - N + 1 문제

운영
운영

운영 - 로그 롤링
운영 - swagger

보안
보안(스프링 시큐리티)

보안 - 스프링 시큐리티
보안 - jwt
