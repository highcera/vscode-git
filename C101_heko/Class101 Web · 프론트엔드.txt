Class101 Web · 프론트엔드
React 찍먹반 : 가볍게 시작해 포폴까지 챙기기

Section 1. React 시작하기! 벌써 반 했다
React는 뭐지? 왜 인기일까?
개발 환경 설정 (Node.js, npm, create-react-app)
JSX 간단히 알아보기






Section 2. React의 핵심, 컴포넌트로 나누고 재사용하기
1. 컴포넌트(Component)란? (ComponentEx1.jsx)
컴포넌트는 화면을 구성하는 독립된 블록 단위
하나의 기능이나 UI 조각을 정의하고, 필요할 때마다 사용 가능

컴포넌트가 필요한 이유
1. 코드 분리가 쉬워진다
→ 각 UI 단위를 별도로 만들면 유지보수가 쉬워요.
2. 재사용이 가능하다
→ 같은 UI를 여러 곳에서 쓸 수 있어요.
3. 읽기 쉬워진다
→ 전체 화면을 여러 블록처럼 나눠서 이해하기 쉬워져요.

node.js 설치
vscode 설치
npx create-react-app react-basic
폴더 변경 reacr-basic
npm i
npm run start

마무리 요약
- 컴포넌트는 웹 페이지를 작고 재사용 가능한 단위로 나눈 것입니다.
- React는 이 컴포넌트를 조립하듯이 만들어 화면을 구성해요.

2. 함수형 컴포넌트 쉽게 이해하기 (ComponentEx2.jsx)
- 간단하고 직관적
- Hooks 사용 가능
- 재사용성
- 컴포넌트 이름 : 대문자로 시작해야 컴포넌트로 인식됨

마무리 요약
- 함수형 컴포넌트는 React의 기본 단위
- 입력 (props)을 받아 UI(JSX) 를 반환하는 형태
- 대문자 시작: React가 컴포넌트로 인식할 수 있게 함

3. Props로 데이터 전달하기 (ComponentEx3.jsx)
단방향 데이터 흐름
- 데이터는 부모 → 자식 방향으로만 흐름
- 자식에서 부모로 직접 수정 불가

읽기 전용
- Props는 자식 컴포넌트에서 수정할 수 없음
- 항상 부모에서 정의된 값을 그대로 사용

필수 아님
- Props를 받지 않아도 컴포넌트는 동작 가능

- Props로 데이터 전달하기
단방향 데이터 흐름
읽기 전용
필수 아님

마무리 요약
- Props는 컴포넌트 간 데이터를 전달하는 기본적인 방법
- 부모 → 자식 방향으로만 데이터 전달 가능
- 비구조화 할당으로 코드를 더 간단하고 직관적으로 만들 수 있음


Section 3. 상태(State)와 이벤트 - 클릭하면 변하는 화면 만들기
상태(State)라는 건 왜 필요할까? (StateEx1.jsx)

마무리 요약
- State는 컴포넌트의 현재 상태를 저장하고 관리하는 데이터
- State가 변경되면 화면이 자동으로 다시 그려짐
- State가 없으면 데이터가 변해도 화면이 갱신되지 않음

useState로 상태 관리해보기 (StateEx2.jsx)
마무리 요약
- useState는 React에서 상태를 관리하는 기본 도구
- 초기값을 설정하여 현재 상태와 상태를 변경하는 함수를 반환
- 상태가 변경되면 컴포넌트가 다시 렌더링


이벤트(onClick, onChange)로 화면 바꾸기 (StateEx3.jsx)

이벤트 란?
- 이벤트는 사용자가 웹 페이지에서 발생시키는 모든 동작을 의미
- 버튼 클릭, 입력 필드 수정, 마우스 이동, 키보드 입력 등이 대표적인 예시
- React에서는 이러한 이벤트를 HTML 태그의 속성처럼 작성된 특별한 프로퍼티로 처리
- 이 프로퍼티는 "on"으로 시작하며, 카멜 케이스(camelCase)로 작성
- 예를 들어, onClick은 버튼 클릭 이벤트를 처리하고, onChange는 입력 필드의 변경을 처리

마무리 요약
- onClick은 버튼, 이미지 등 클릭 가능한 요소에서 사용
- onChange는 입력 필드에서 데이터 변화를 감지하는 데 사용
- 이벤트 핸들러를 통해 사용자 상호작용을 처리



Section 4. useEffect 이해하기: 자동으로 실행되는 기능 만들기
1. useEffect Hook 이해하기 (UseEffectEx1.jsx)
왜 useEffect 가 필요한가?
- 컴포넌트의 생명 주기 관리
- 부수 효과 관리
- 상태와 사이드 이펙트의 분리
- 메모리 누수 방지

useEffect의 주의점
- 무한 루프 주의
- 비동기 작업 처리
- 정리 작업 필수

마무리 요약
- useEffect는 컴포넌트의 부수 효과를 처리하는 Hook
- 의존성 배열을 통해 언제 실행할지 제어
- 브라우저의 제목 변경, 콘솔 로그 출력 등 렌더링 외의 작업을 처리할 때 유용

2. 컴포넌트가 바뀔 때마다 자동으로 실행하는 기능 만들기 (UseEffectEx2.jsx)
컴포넌트가 바뀔 때마다 실행되는 useEffect
- useEffect는 기본적으로 컴포넌트가 렌더링 될 때마다 실행
- 상태가 변경되거나, 부모 컴포넌트에서 받은 props가 변경될 때도 실행
- 의존성 배열을 이용해 특정 상태가 변할 때만 실행할 수 있도록 제어

코드 비교 결과 정리
유형                          실행 시점                          특징 
빈 배열( [] )                 최초 렌더링 시 한 번만      화면에 처음 나타날 때 초기화 작업에 유용
특정 상태 ( [name] )      해당 상태가 변할 때          특정 상태가 변할 때마다 실행
배열 없음                    매 렌더링마다                  상태나 props가 바뀔 때마다 실행 (주의 필요)


마무리 요약
- 빈 배열 ([]): 초기화 작업
- 특정 상태 ([name]): 특정 상태가 변할 때 실행
- 배열 없음: 매 렌더링마다 실행 (비효율적일 수 있음)

3. 간단한 비동기 처리 살짝 맛만 볼까? (setTimeout 등) UseEffectEx3.jsx
비동기 처리 란?
- 비동기란 지연 시간이 있는 작업을 기다리지 않고 바로 다음 작업을 실행하는 방식
- 작업을 요청해놓고 결과가 나올 때까지 기다리지 않고 다른 작업을 먼저 처리하는 것

동기 (Synchronous)                             비동기 (Asynchronous)
작업이 순서대로 진행                          작업이 동시에 진행
앞의 작업이 끝나야 다음 작업 시작        앞의 작업을 기다리지 않고 바로 다음 작업으로 넘어감
예: for 반복문, 수학 계산                      예: API 호출, 타이머 (setTimeout)

비동기 처리의 주의점
- 클린업 필수
- 메모리 누수 방지
- 의존성 배열 주의

비동기 처리의 주의점
- 클린업 필수
- 메모리 누수 방지
- 의존성 배열 주의

마무리 요약
- setTimeout: 일정 시간 후에 한 번만 실행
- setlnterval: 일정 시간마다 반복해서 실행
- 정리 함수(cleanup) 를 통해 메모리 누수를 방지


Section 5. 여러 페이지로 구성된 앱 만들기
1. SPA(싱글 페이지 앱)와 라우팅은 무엇일까? (PageEx1)
SPA (Single Page Application)란?
- 하나의 HTML 파일로 여러 페이지를 구현하는 Web Application
- 한 번 로딩 후 필요한 부분만 업데이트
- 빠른 전환과 부드러운 사용자 경험 제공

왜 SPA 가 필요할까 ?
- 더 빠른 사용자 경험
- 부드러운 전환 효과
- 모던 웹 애플리케이션의 기본 구조 (React, Vue, Angular)

라우팅(Routing)이란?
- URL 경로에 따라 화면에 보여줄 컴포넌트를 결정하는 방법
npm install react-router-dom

라우팅의 주의점
- 서버 설정
- 404 오류 방지
- 페이지 reload 시 주의

마무리 요약
- SPA는 한 번 로딩 후 필요한 부분만 업데이트하는 웹 애플리케이션 구조
- 라우팅은 URL 경로에 따라 다른 컴포넌트를 표시하는 방법
- React에서 라우팅을 구현하려면 React Router와 같은 라이브러리가 필요

2. React Router로 페이지 이동 구현하기 (PageEx2)
React Router 란?
- React Router는 SPA (Single Page Application)에서 페이지 간 이동을 가능하게 해주는 라이브러리

React Router 기능
- URL에 따라 다른 컴포넌트를 렌더링
- 브라우저의 히스토리를 관리하여 뒤로 가기, 앞으로 가기 기능 지원
- 동적 라우팅, 중첩 라우팅, 인증 보호 등 다양한 고급 기능 지원

라우팅 시 주의점
- 404 오류 방지
- 라우팅 경로의 일관성
- 대소문자 구분

마무리 요약
- React Router는 SPA에서 페이지 이동을 가능하게 해주는 라이브러리
- BrowserRouter, Routes, Route, Link는 기본적인 라우팅을 설정하는 데 사용

3. 동적 라우팅으로 페이지 자유롭게 구성하기 (PageEx3.zip)
동적 라우팅이란?
- URL의 일부를 변수처럼 사용하여 다양한 페이지를 생성하는 방법

동적 라우팅 사용 사례
- 블로그 게시글 (/post/123)
- 사용자 프로필(/user/codeuck)
- 상품 상세 페이지 (/product/abc123)

동적 라우팅의 장점
- 코드 재사용성
- URL 관리의 간편함
- SEO 최적화

마무리 요약
- 동적 라우팅은 URL 파라미터를 사용하여 다양한 데이터를 처리하는 방법
- useParams() 를 사용하여 URL에서 파라미터를 가져옴
- 각 데이터에 대해 고유한 URL을 제공하여 더 나은 SEO 효과를 기대


Section 6. 상태 관리 레벨 업 : 어디서든 데이터 가져오기
전역 상태가 뭐야? 왜 필요할까?

Context API 와 useContext 를 쉽게 써보자

Zustand를 이용한 상태 관리 맛보기

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
mini project. 나만의 Github 포트폴리오 사이트 만들기
1. 프로젝트 준비하기 (기본 설정) (index.css)

npx create-vite my-portfolio -- --template react



2. 포트폴리오 사이트 레이아웃 만들기

3. 페이지 구성과 라우팅 설정하기

4. 전역 상태 관리 적용하기

5. 프로젝트 빌드 및 Github에 배포하기


Bonus Section. Virtual DOM과 Rendering 이해하기

1. React에서 가장 중요한 Virtual DOM이란?

2. Rendering 방식 - CSR 이란?