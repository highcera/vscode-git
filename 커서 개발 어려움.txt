요즘 코딩 왜 배움? 에 대한 반박영상 | 커서로 개발하는게 개 힘든 이유

1. 기존 패턴을 완전 무시하고 짬
2. 구체적인 지시가 없으면 확장성을 전혀 고려하지 않고 짠다.
3. 이미 있는 라이브러리를 안쓰고 새로운 라이브러리 추천
4. 자꾸 하드코딩을 함
5. 눈에 보이는 개념만 개발, 연결된 개념은 신경 안씀
6. 복잡한 구조 분해는 잘 못한다.
7. 통념을 가지고 코드를 짠다. (api에서 _id / uid 로 넘어오는 것을 id)

context / 룰스 파일 / 이걸 핸들링 해주는 에이전트 그리고 Thinking 모델

Url 분리, 페이지랑 레이아웃도 분리, 하드코딩하지말고 라고 하니까 뭔가 뜨끔했는지 갑자기 고치고 난리났음. 
PRD짜고 룰짜고 ESLint, Jest, CI, 등등 다 테스팅 프레임워크로 컨트롤을 할려고 노력을 해도 잘 컨트롤이 안되는데 바이브 코딩인데 자세히 분석을 해 주셔서 감사합니다! *
어떻게 바이브코딩을 써서 앱 만드는 루틴을 만들지 고민. 차라리 그냥 MVP만 짜고 그 다음부터는 코딩에 뛰어드는것이 더 빠를수도 있겠죠.. ㅎㅎ

룰 세팅을 하신 뒤에 명령시 매번 세팅된 룰에 기반해서 해줘 라고 해야 하구요, 
만약 제대로 이해를 못했다면 네가 알고 있는 룰을 나에게 설명해봐 라고 하면 룰을 잘못했는지 아니면 룰에 대한 이해를 잘못했는지를 알 수 있기 때문에 오히려 룰을 잘 만들게 되고 
그에 따른 프로젝트 도큐멘테이션 능력이 아주 올라가게 됩니다. 
앞서 말씀 하셨던 바이브코딩에서 AI가 잘못 하던 방식도 모두 클리어가 되구요.
그리고 ai에게 이것저것 요청해서 완성된 경우 항상 rule document도 업데이트 해달라고 요청해서 잘못 인지한게 있는지 체크하는 것도 중요합니다.

추가 팁도 생각이 났는데요.. 만든 기능을 이름으로 나눈 뒤에 기능마다 독립적으로 움직이게 설계해서 제작하게(MSA)하시고, 
생성된 기능을 직접 실행하지 마시고, ai창에  독립된 기능을 채팅창에서 실행해줘 라고 하면 기능 실행중에 생긴 모든 에러 메시지는 스스로 보고 해결해줍니다.. 
때문에 얼마다 잘게 잘라서 MSA기반으로 분리가능하도록 룰을 만드느냐도 중요합니다.

사내 CMS

ai딸깍딸깍 이러는데 이게 애~~매한 그런게 있어서 아무리 룰을 잘 만들어도 한계가 있어요.
원하는 작업을 최대한 자세히 정확히 얘기해도 한번에 알아듣는 적이 30~40%정도?
딸깍딸깍을 수십 수백번해야 앱하나 만들어질까 말까입니다ㅠㅠ
시작하는 분들께 팁을 드리자면 크레딧 아끼지말고 최대한 비싼 모델쓰십시오 ㅋ (클로드3.7띵킹이라던가)

팁 드리자면 굉장히 구체적인 명령으로 기본기능(관리자,로그인,게시판) 이 있는 보일러플레이트를 만들어달라고 하시고, 
그이후부터는 그냥 그때그떄 필요한 함수만들어달라고하면서 적절한곳에 끼워넣는 방식으로 개발하는게 가장효율적임

10:00 룰 세팅이 너무 길면 자칫 망각되거나 반영이 제대로 다 안될수있어요. 핵심위주로 명확히 프롬프팅 하셔야합니다.
저도 룰 잘 안먹는 것 같아서 요청시 mdc 룰 지켜달라고 한 줄 더 입력하면 훨 낫긴하네요

??? 기술문서, 코딩 프로토콜 작성해놓고 시키면 잘 합니다..

무서운 건 사실이고, 이럴 때 일수록 우리는 기획/분석/설계를 잘 할 줄 알아야 하고, 글쓰기 능력을 키우고 AI와의 대화법에 빨리 익숙해져야 합니다.
어설프게 자연어로 프롬프팅하는 개발자와, 탄탄한 분석산출물을 가지고 AI와 대화하는 사람은 천지차이의 생산성을 가지는 걸 눈으로 많이 보고 있습니다.
1x년동안 소프트웨어엔지니어와 아키텍트로 업무를 하고 있는 찐 개발자입니다.



그나마 frontend는 할만합니다.  명세서를 상세하게 작성하고, mcp이용해서 context나 task 처리 잘 하면 어찌저찌 하기는 하는데, backend에서는 그냥 멍청해서 못씁니다.  
조금 생소하거나 integration과정에서의 복잡성이 나타나기 시작하면 아예 아무것도 못합니다.  vibe coding이야 말로 LLM의 한계를 보여주고 있다고봅니다. 사고력이 있는게 아니라, 그냥 검색엔진 강화판이죠.

 vibe coding은 fast prototyping용이나 한번 쓰고 버릴 스크립트 작업용이 딱입니다.

기획문서 수백페이지 디테일하게 해달라고 하고 gpt-O3한테 개발로드맵을 한번에 처리가능한 단위로 나눠서 번호를 메기고 한개씩 진행할때 마다 나한테 작업내역을 확인받고 순서대로 진행해줘.   
이렇게 나눠서 작업해야 결과가 제대로 나오더라구요.


ai 코딩 활용 제일 좋은건
- 기존에했던 작업 유사 패턴 코드들 탭으로 해주는것
- 유틸 작성
- 간단한 단위 테스트코드
- 기존에 짠 메서드 효율적 방안있는지 물어보고 비교하고 좋은것만 차용
이정도는 좋고 그외는 잘모르겠습니다. ai가 짜주는거 오히려 문제점 없는지 디버깅하는데 더 오래 걸려요.
일례로 천라인 정도 되는 파일 리팩토링 하라고 하면, 몇번 하다보면 그냥 직접 하는게 훨 좋습니다.
그냥 토이프로젝트나, poc코드, 정적웹페이지 아닌이상 아직은 풀 바이브코딩은 모르겠습니다. 아직은 AI 가 잘하는것만 시켜서 생산성 높이는게 나은것 같습니다. 
즉 개발 지식없이 만들수는 있으나 공개용 런칭하고 그걸 유지보수를 계속 할수 있을지 모르겠네요. 유지보수 필요없는 간단한거면 몰라도요.

notebooklm한테 기술문서 주고 전략 짜달라고 한 뒤 커서ai한테 제미나이가 시키는대로 입력하면 됨


음.. 저도 ai활용해서 개발을 하고 있는데요 chatgpt랑 커서ai 차이가 좀 있어요 
chatgpt (평소 자주 대화하는 주력 ai) 제가 자주 사용 해서 뭔가 프로젝트에 대해 자세한 내용과 충분한 설명을 하면 이걸 다 기억하고 그 맥락으로 코딩을 해주더라구요 
그런데 커서 ai는 좀 다르더라구요 커서ai에 있는 chatgpt는 그냥 완전히 다른애 더라구요 내가 대화한 내용을 다 기억 하기 못하고 그 프로젝트에 파읾만 보고 코딩 하는 스타일 이라 스파게티 코딩이 나오고 일관성이 없더라구요 
그래서 저는 이렇게 사용 해요 반복 작업 하는경우는 커서ai 에서 도움을 받고 
전체프로젝트 큰그림과 충분한 설명을 한 chatgpt는 큰 맥락만 보고 도움을 받아요 그렇게 하니까 chatgpt는 코드 잘 짜주더라구요

일단 기존의 코드가 AI가 이해하기 쉬운 구조로 작성되어 있지 않다는게 가장 큰 것 같습니다.
저는 새로 작성하는 프로젝트의 경우 구조를 LLM 이 이해하기 쉽고, 건들여도 큰 문제 없고, 모듈 별로 테스트할 수 있도록
Feature-Atomic + Sub-Bus Structure 의 하이브리드 형태의 구조로 처음에 윤곽을 잡아놓고 작성합니다. 
그럼 llm 이 전체 코드에서 관련된 파일을 찾느라 허우적대지 않고 제가 지정한 폴더 내의 파일들만 확인하면 되기에 오류가 좀 더 적더군요.


저는 그래서 코드를 이론상으로 다 공부하고 이런 기법이 있으니 쓰라고 인공지능에게 시키기로 했어요. 그러니까 깃헙에 이런 코딩 기법이 있네~ 하고 인사이트는 수동적으로 습득하고 인공지능에게 코딩은 시키고

MCP를 사용하세요~ 말씀하신 대부분을 MCP가 해결해줍니다잉

rule 잘 작성해서 명령하면 일관적으로 만들지 않나요!?

Memory bank 기법 한번 알아보시지요
결국 장기기억 즉 컨텍스트가 유지되지 않는다는 게 현재의 한계인데 그부분을 해결해주는 실마리인 것 같아요


======================================================================
@jollibeecheese
개발 20년차이고 IT기업다니는데, AI 등장으로 개발 시간 절약이 많이 되는 장점은 있습니다. Stackoverflow 찾아볼 시간을 줄어 주니까요. 
또한 회사에서 신입 중견 키울 시간에 시니어급에게 AI 활용해서 개발하라는게 효율이 더 좋으니. 회사입장에서는 비용절감 되고 고급 개발자는 자리보전되니 좋죠. 
안 좋은거는 AI 보다 효율성이 떨어지는 신입 개발자들이라고 생각합니다.  올라갈 사다리 조차 없어지니까요. 

@홍태준-s7m
반대로 코드 리뷰 할 수 있는 수준까지만 가면 바이브 코딩 했을 때 생산성이 어마어마하게 늘어나긴 하더라고요

@dodo-rp3dh
사실 이건 AI문제라기보단 순수하게 사람의 문제여서 해결할려면 ai한테 rule을 던져줘서 확장성 고려 및 어느방식으로 서비스를 해야되는데 어쩌구 하면서 던져줘야됨

@tangiblemark
context가 중요해요. 룰스 파일이나, 이걸 핸들링 해주는 에이전트 그리고 Thinking 모델 쓰면 좀 차이나더라고요.

@JadaKing-g5z
4일 전
키워드 케치해갑니다. Url 분리, 페이지랑 레이아웃도 분리, 하드코딩하지말고 라고 하니까 뭔가 뜨끔했는지 갑자기 고치고 난리났음. 

@soojaesung
바이브코딩으로 앱만들고 서비스를 만들었다고 하는데 PRD짜고 룰짜고 ESLint, Jest, CI, 등등 다 테스팅 프레임워크로 컨트롤을 할려고 노력을 해도 잘 컨트롤이 안되는데 바이브 코딩인데 자세히 분석을 해 주셔서 감사합니다! 
그게 현실인줄은 알겠는데, 그럼 여기에서 어떻게 바이브코딩을 써서 앱 만드는 루틴을 만들지 고민입니다. 차라리 그냥 MVP만 짜고 그 다음부터는 코딩에 뛰어드는것이 더 빠를수도 있겠죠.. ㅎㅎ

@lowy1722
룰 세팅을 하신 뒤에 명령시 매번 세팅된 룰에 기반해서 해줘 라고 해야 하구요, 
만약 제대로 이해를 못했다면 네가 알고 있는 룰을 나에게 설명해봐 라고 하면 룰을 잘못했는지 아니면 룰에 대한 이해를 잘못했는지를 알 수 있기 때문에 오히려 룰을 잘 만들게 되고 
그에 따른 프로젝트 도큐멘테이션 능력이 아주 올라가게 됩니다. 
앞서 말씀 하셨던 바이브코딩에서 AI가 잘못 하던 방식도 모두 클리어가 되구요.
그리고 ai에게 이것저것 요청해서 완성된 경우 항상 rule document도 업데이트 해달라고 요청해서 잘못 인지한게 있는지 체크하는 것도 중요합니다.

@코딩알려주는누나
오 참고해서 다시 해볼게요!

@lowy1722
 @코딩알려주는누나  추가 팁도 생각이 났는데요.. 만든 기능을 이름으로 나눈 뒤에 기능마다 독립적으로 움직이게 설계해서 제작하게(MSA)하시고, 
생성된 기능을 직접 실행하지 마시고, ai창에  독립된 기능을 채팅창에서 실행해줘 라고 하면 기능 실행중에 생긴 모든 에러 메시지는 스스로 보고 해결해줍니다.. 
때문에 얼마다 잘게 잘라서 MSA기반으로 분리가능하도록 룰을 만드느냐도 중요합니다.

@말랑-l1l
어떤 서비스를 숲이라는 그림으로 표현하자면 숲에있는 나무 정도는 ai를 통해서 디테일한 부분을 깎을수는 있죠. 대부분의 개발자들은 이런부분에서 도움을 받습니다.

@룸84
누나의 바이브 코딩 덕분에 사내 CMS 만들어서 칭찬 받았습니다. 감사합니다.

@코딩알려주는누나
와 CMS까지 만드셨다니! 짱이에용!
제가 다 뿌듯합니다!!

@cathylee1533
얼마전에 구글에서 봤는데 교수님이 AI로 코딩 과제해봐라. 실제로 working이 되는지 라며... ㅎㅎㅎ Chat GPT가 모든 답을 알려주고 한다지만 실제로 과제할때 써보세요. 미쳐요. 
짜주는 코드에 쓸만한게 많지 않고 결국은 본인이 공부해서 하지 않으면 동작 안하고 코딩이 아니라 수학이등 글쓰기 이든 헛소리가 엄청많아서 이대로 과제내면 ...;;;;;; 
대학교 저학년은 교수님이랑 조교들이 대충대충 검사하면 넘어가겠지만 석사, 박사까지 가려면 본인이 이게 맞다 아니다 틀렸다 뭐가 틀렸냐를 알아낼 능력이 없으면 아무것도 못해요. 
산수도 계속 틀리고 기호 적는 것도 디테일하게 계속 틀려요. 결국 본인이 공부해야지만 제대로 쓸 수 있어요. 
미디어에서처럼 언젠가는 인간을 대체할 수도 있겠죠. 100프로? 어떤 직업에서는? 한 20? 30년 안에? 근데... 100프로 대체될 직업만 그렇고 변수가 너무 많아요. 
그리고 베터리없으면 안되고 위성연결이 어려워지면 또 안되고.. 전기 끊기면 또 안되고... 전 그냥 컴퓨터 출시되었을 때랑 다르지 않다고 봅니다. 
산업혁명 같은 거죠.

@BoardLive
완전 공감합니다! 열거하신 한계들 정말 다 경험했어요 ㅎㅎ 
특히 하도 에러를 못 잡아서 직접 하나하나 코드 보면서 찾아낸 것이 api에서 _id로 넘어오는 것을 id로 처리한 거 ㅠㅠ

@AlwaysWeb
커서는 채팅 기능 아예 안써도 탭 기능이 사기더라구요. 깃허브 코파일럿보다 훨씬 뭘 해야 할지 빠르고 정확하게 이해한다는 느낌이었습니다. 코딩은 수단일 뿐, 커서가 있으면 더 좋으면 좋지 나쁠 건 없음

@SNIinWL
전부 공감입니다.
ai딸깍딸깍 이러는데 이게 애~~매한 그런게 있어서 아무리 룰을 잘 만들어도 한계가 있어요.
원하는 작업을 최대한 자세히 정확히 얘기해도 한번에 알아듣는 적이 30~40%정도?
딸깍딸깍을 수십 수백번해야 앱하나 만들어질까 말까입니다ㅠㅠ
시작하는 분들께 팁을 드리자면 크레딧 아끼지말고 최대한 비싼 모델쓰십시오 ㅋ (클로드3.7띵킹이라던가)

@TheWoseven
사실 10만큼 배우고 혼자서 연습하면(더깊이 하면 좋겠지만) 인터페이스/화면 설계같은 경험이 필요한 부분을 제외하면, 50만큼의 실력을 쌓을 수 있는 분야가 프런트쪽 개발이라고 생각합니다. 
어찌되었든 사람들이 일반개발은 배우지 않고 바이브코딩에만 계속 관심을 가져주셨으면 합니다.

@ayla2357
AI는 확실히 만능은 아니고 개쩌는 도우미 느낌인거 같죠. 주먹구구 식은 문제없지만 치밀하고 보기 좋게 코드를 짜려면 개발자 능력은 아직까지 꽤나 필요한 편인거 같이 느껴져요. 
코딩의 주된 역량이 코드를 짜는 것 자체에서 설계를 잘하는 쪽, AI를 잘 다루는 쪽으로 어느정도 옮겨질 수 있을거 같기는 하지만 AI로 완전히 다 해결하는건 지금으로 봐서는 무리인거 같아요.

@SJAerial
ai 가 제공한 코드라도 최소한 어느 파트가 어느 역할을 하는건지는 알아야함 아님말구

@YoungheeKwon-v2i
명령은 PC 주인이 하고, 계획 실행 결과물은 PC가 하는데 ... 이게 ... 주인이 똑똑해야 ... 결과물이 잘 나올것 같아요.

@솓기
팁 드리자면 굉장히 구체적인 명령으로 기본기능(관리자,로그인,게시판) 이 있는 보일러플레이트를 만들어달라고 하시고, 
그이후부터는 그냥 그때그떄 필요한 함수만들어달라고하면서 적절한곳에 끼워넣는 방식으로 개발하는게 가장효율적임.

@crayfallinsecondlife5329
윈드서프에서 클로드 3.7 소넷(thinking)으로 실험해봤는데 소스 규모가 커지면 나중엔 소화를 못하고 무한 루프 돌더군요. ㅎ

@artisunknown
약 한 달 뒤면 이 문제들이 하나하나 구체적으로 해결된 AI를 쓰게 됨. 오늘 당신이 사용한 AI는 당신이 앞으로 사용할 AI 중 가장 뒤쳐지는 성능의 AI이다.

@KnowledgeDBman
10:00 룰 세팅이 너무 길면 자칫 망각되거나 반영이 제대로 다 안될수있어요. 핵심위주로 명확히 프롬프팅 하셔야합니다.

@eugenepark79
요즘 AI와 매일 싸우고 있어요.
고집도 쎼고 했던 말 또하고...
창 닫고 다른 코드에이전트 불러서 해결

@제이-g8j
유툽 어그로 상당하네요. 바로 눌러 들어왔습니다.
저도 룰 잘 안먹는 것 같아서 요청시 mdc 룰 지켜달라고 한 줄 더 입력하면 훨 낫긴하네요

@MrBogoon
한계가 분명하긴 한데 어느정도 본인만의 요령을 정립 시킨다면 뭔가 박사님 몇 명 집에 상주시키면서 서포트 받는 정도의 생산성은 나오는거 같습니다.
프로젝트의 전체 구조에 대한 이해는 휴먼 당사자가 분명 이해하고 진행하긴 해야하는거 같구요 ㅎ

@FishFactori
??? 기술문서, 코딩 프로토콜 작성해놓고 시키면 잘 합니다..

@bibibicc
웃자고 하는 소리지만,
여기서 반박하는 모든 게 AI 모델이 개선되면 사람보다 못 할 영역이 하나도 없습니다.

무서운 건 사실이고, 이럴 때 일수록 우리는 기획/분석/설계를 잘 할 줄 알아야 하고, 글쓰기 능력을 키우고 AI와의 대화법에 빨리 익숙해져야 합니다.
어설프게 자연어로 프롬프팅하는 개발자와, 탄탄한 분석산출물을 가지고 AI와 대화하는 사람은 천지차이의 생산성을 가지는 걸 눈으로 많이 보고 있습니다.

1x년동안 소프트웨어엔지니어와 아키텍트로 업무를 하고 있는 찐 개발자입니다.

@philipuuu991
진짜 큰 착각이긴함 
아무리 LLM이 좋아졌다고 해도 파라미터값 많은 심심이에 불과하고, 참고로 자신의 AI모델도 자기가 아는만큼 똑똑해지는거라 누가 사용하느냐에 따라 작업완성도가 천지차이인거같음. 
그래도 없는거에 비해서 생산성이 10배 이상 증가하는건 팩트네요 ㅋㅋ

@kimyanoo1176
그나마 frontend는 할만합니다.  명세서를 상세하게 작성하고, mcp이용해서 context나 task 처리 잘 하면 어찌저찌 하기는 하는데, backend에서는 그냥 멍청해서 못씁니다.  
조금 생소하거나 integration과정에서의 복잡성이 나타나기 시작하면 아예 아무것도 못합니다.  vibe coding이야 말로 LLM의 한계를 보여주고 있다고봅니다. 사고력이 있는게 아니라, 그냥 검색엔진 강화판이죠.

 vibe coding은 fast prototyping용이나 한번 쓰고 버릴 스크립트 작업용이 딱입니다.

@coingames
기획문서 수백페이지 디테일하게 해달라고 하고 gpt-O3한테 개발로드맵을 한번에 처리가능한 단위로 나눠서 번호를 메기고 한개씩 진행할때 마다 나한테 작업내역을 확인받고 순서대로 진행해줘.   
이렇게 나눠서 작업해야 결과가 제대로 나오더라구요.

@지니22-j7o
ai 코딩 활용 제일 좋은건
- 기존에했던 작업 유사 패턴 코드들 탭으로 해주는것
- 유틸 작성
- 간단한 단위 테스트코드
- 기존에 짠 메서드 효율적 방안있는지 물어보고 비교하고 좋은것만 차용

이정도는 좋고 그외는 잘모르겠습니다. ai가 짜주는거 오히려 문제점 없는지 디버깅하는데 더 오래 걸려요.

일례로 천라인 정도 되는 파일 리팩토링 하라고 하면, 몇번 하다보면 그냥 직접 하는게 훨 좋습니다.

그냥 토이프로젝트나, poc코드, 정적웹페이지 아닌이상 아직은 풀 바이브코딩은 모르겠습니다. 아직은 AI 가 잘하는것만 시켜서 생산성 높이는게 나은것 같습니다. 
즉 개발 지식없이 만들수는 있으나 공개용 런칭하고 그걸 유지보수를 계속 할수 있을지 모르겠네요. 유지보수 필요없는 간단한거면 몰라도요.

@정정길-o3g
지난 영상에서 개발 처음하는 사람이 맨 처음 해봐야 할 "그냥 데이터 보여주기!"를 하는데는 저는 편하게 쓰고 있어요. 방식이 바이브 코딩이 아닌, 제가 코드를 짜고 이거 왜 안될까...? 하면 좀 도와주던데... 

지난번에 말씀하신 개발자 초보가 트라이하기엔 정말 쉬워진게 맞는것 같아요. 그리고 얘가 못해주면 내가 찾아서 해보면 되고요. 
역할이 인터넷이, 백화사전이, 책이 지식의 확장을 가속화 한것처럼 지식의 확장의 가속인것 같아요... 백과사전 아무리 좋은걸 줘도 누군 증기기관을 만드는데 누군 밭 갈고 있듯이요...(예시가 적절한지 모르겠네요...)

@amen-g3u8i
notebooklm한테 기술문서 주고 전략 짜달라고 한 뒤 커서ai한테 제미나이가 시키는대로 입력하면 됨

@phlox11
개발을 잘 하는 사람이 더 잘하게 해주는거지 개발을 못하는데 잘하게 해주는게 아닙니다. 
토이프로젝트라면 뭐… 대충 쓰고 버리는 코드는 잘 만들긴 하더군요.

@kuoro987
요즘 AI로 돈 번다. 모두 사기 인 것 처럼.. 말씀하신 내용이 전부 맞습니다. 헌데 얘네는 토큰이 정해져 있어서.. 규칙을 많이 정해 놓을수록 그거 쫓아가다 우왕좌왕 토큰 다 써버리고 포기 함. 
게다가 요즘은 확증편향까지.. ㄷㄷ 좋아하는 말과 결과만 해줌. 지금같은 과도기에 AI는 그냥 잘봐줘야 교육용. 핵심 파악된 극소수의 사람은 그럭저럭 잘 씀.

@kimsw654
음.. 저도 ai활용해서 개발을 하고 있는데요 chatgpt랑 커서ai 차이가 좀 있어요 
chatgpt (평소 자주 대화하는 주력 ai) 제가 자주 사용 해서 뭔가 프로젝트에 대해 자세한 내용과 충분한 설명을 하면 이걸 다 기억하고 그 맥락으로 코딩을 해주더라구요 
그런데 커서 ai는 좀 다르더라구요 커서ai에 있는 chatgpt는 그냥 완전히 다른애 더라구요 내가 대화한 내용을 다 기억 하기 못하고 그 프로젝트에 파읾만 보고 코딩 하는 스타일 이라 스파게티 코딩이 나오고 일관성이 없더라구요 
그래서 저는 이렇게 사용 해요 반복 작업 하는경우는 커서ai 에서 도움을 받고 
전체프로젝트 큰그림과 충분한 설명을 한 chatgpt는 큰 맥락만 보고 도움을 받아요 그렇게 하니까 chatgpt는 코드 잘 짜주더라구요

@noname-js5uj
AI 수준이 아무리 높아져도 사용자 수준이 너무 낮으면 그냥 깡통이 되어버립니다.

그래서 저는 남들이 결과물만 만들고 있을 때 남들보다 조금 뒤쳐져도 
어떤 라이브러리에 대한 다양한 컴포넌트 및 메서드들에 대해 하나씩 이해하고 
굳이 직접 코딩을 하면서 버전 문제 등에 의해 막히는 부분이 있을 때만 AI에 의존하는 식으로 연습하고 있습니다.

그리고 조건문(if문)부터 재귀 함수, DP 알고리즘, 그리디 알고리즘, dfs, bfs, 더 나아가 세그먼트 트리 등 알고리즘에 대해 공부를 꾸준히 해서 기초를 완전히 튼튼하게 만들려고 노력합니다.

쉽게 말해 기초부터 튼튼하게 하고 AI를 활용한 바이브 코딩으로 넘어갈려고 지금도 핫식스 마시면서 공부하는 중입니다ㅋㅋㅋㅋ...

@masshunter
프로그램밍 한다는 자체가  영어코딩문법을 아는게 10% 이고  나머지 90%는 그 문법을 가지고 구축하는 여러 과정이라고 개인적으로 생각합니다. 
이 말인즉슨 말로 코딩하나 코딩언어로 코딩하나 어차피 90%의 구축과정은 똑같은게 아닐까  하는 생각이 드네요. 
즉 바이브코딩이라고 코딩 돌아가는 시스템을 배우지 않아도 된다는 얘기는 성립하지 않는다고 봅니다.

@kf5yu
커서 다 좋은데
새로운 기능 추가하다가 기존에 있던 다른 코드를 날려먹고 추가하는 경우기 있음 모르고 있다가 골치 아픈적 있어요~
그리고 AI가 웃긴게 의외로 구라를 쳐요 ㅋㅋ

@333real5
다른것 보다 디버깅은 직접 해야 되서.. 
재미있는 코딩은 지가 다 하고 나는 디버깅 머신이 되버림 ㅠ

@hhk9803
사실 AI가 무서운건 지금 어떻다 라는거보단 발전속도죠.
불과1~2년 전이랑 비교하면 체감상 엄청나게 발전했고 발전하고 있음.
그래도 여전히 프로그래밍 공부는 해야죠. AI는 책임을 안져요. 책임없는 쾌락주의자..

@shaceab
일단 기존의 코드가 AI가 이해하기 쉬운 구조로 작성되어 있지 않다는게 가장 큰 것 같습니다.
저는 새로 작성하는 프로젝트의 경우 구조를 LLM 이 이해하기 쉽고, 건들여도 큰 문제 없고, 모듈 별로 테스트할 수 있도록
Feature-Atomic + Sub-Bus Structure 의 하이브리드 형태의 구조로 처음에 윤곽을 잡아놓고 작성합니다. 
그럼 llm 이 전체 코드에서 관련된 파일을 찾느라 허우적대지 않고 제가 지정한 폴더 내의 파일들만 확인하면 되기에 오류가 좀 더 적더군요.

@heesongkoh
그래도 3년전에 쓰던거에 비하면 많이 발전됨. 알파고가 AI만의 학습방법으로 사람보다 바둑잘두는 것처럼. AI가 0,1로만 프로그래밍 자가학습하고 새로운 방법으로 프로그램 하기 시작할것임. 
그게 언제냐고?...뭘러. 폰노이만이 사람들이 어셈블리어로 프로그램짜기 시작했을때 엄청반대했다함. 0과1로 짜면되는데 왜 어셈블리어로 짜서 리소스 낭비하냐고...

@윤승정박사
결국 AI가 프로그램을 다 만들어 주는게 아닌데요. 마치 다 만들어 줄것 같은 잘못된 소문을 전세계로 퍼뜨리고 있으니. 지금 같은 자세한 설명은 정말 필요하며 진심 감사합니다. 
항상 좋은 컨텐츠 올려 주셔서 감사합니다. 학생들을 가르치는 교수로써 필수구독채널로 항상 추천하고 있습니다.

@gregchoi3529
전체적인 설계나 프롬프트에 대한 이해가 떨어지면 고역인게 바이브 코딩이죠.
코딩만 잘한다고 되는게 아니에요

@오색구름
원래 코딩은....레퍼런스 참조해서 하는건데.....ai는  그냥 질문에 맞는 레퍼런스 찾아주는 기능 정도.............근데 그것도 잘 못할때가 많더라고요  

생성그림도 그냥...기존에있는그림약간 변조하는 수준
이러니   저작권문제가 나오는거죠

@이슈플레인
저는 그래서 코드를 이론상으로 다 공부하고 이런 기법이 있으니 쓰라고 인공지능에게 시키기로 했어요. 그러니까 깃헙에 이런 코딩 기법이 있네~ 하고 인사이트는 수동적으로 습득하고 인공지능에게 코딩은 시키고

@DevGOM
MCP를 사용하세요~ 말씀하신 대부분을 MCP가 해결해줍니다잉

@short-time-trip
rule 잘 작성해서 명령하면 일관적으로 만들지 않나요!?

@user-jw9er5nc2k
자꾸 틀린거 알려주고 이 점 이상하다고 지적하면
네 맞습니다 핵심을 찔렀네요
이지랄만해서 걍 간단한거나 라이브러리 태그 속성 같은 못외우는거만 시킴

근데 그마저도 어제 closable-chip인가 를 몰라서
자꾸 closable이라고 박박우겨서 진짜 죽빵마려웠음 심지어 클로드 지피티 잼민이 셋 디;

@aando
비전공 취미개발자로써 공감합니다 ㅎㅎ
한번에 100% 구현 및 주입이 아니라 세세하게 1부터 하나하나 추가해가는 방식으로 에뮬돌리고 확인하면서 하는게 초보한테는 맞는거같아요

@secrets-jr9qo
당연히 아직은 그렇지 근데 어느정도 아는 사람이 사용하면 기존 개발자랑 작업 속도, 결과물이 차이가 남. 그리고 착각하는게 AI라는 영역이 완성도 안되었고 초반인데 벌써 불가능 이러고 있는것도 보면 웃김. 
일본 산업에서 기존거 고수하다가 개박살난거보고 그러고 있는거면 조만간 이 사람처럼 한계가 있다. 부족하다 이러는 사람들도 곧 개박살날듯

@Aguagu825
네 근데, 바이브코딩으로 서비스 된다고 어그로 끌어서 조회수 먹고 다시 이런 영상만드는 님에 대해선 어떻게 생각하세요?
feat : https://www.youtube.com/watch?v=AYaQ85gPaV0, 10초

@코딩알려주는누나
영상 10초만 보고  단 댓글이군요 ㅎㅎ

@알바트로슝-l1n
커서를 쓰면 망한다는 케이스를 잘 알려주심. 감사합니다. 역시 코드 이해없는 탭탭탭은 한계가. 코더를 양산해주는 탭탭탭탭. 감사합니다. 커서 많이 애용해주세요. 안심되는 AI 개발자환경.

@코드의추억
Memory bank 기법 한번 알아보시지요
결국 장기기억 즉 컨텍스트가 유지되지 않는다는 게 현재의 한계인데 그부분을 해결해주는 실마리인 것 같아요

@adrianchoi546
결국엔 정교해지려면 또 ai 용 언어들이 니오지 않을련지...