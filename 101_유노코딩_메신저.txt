코딩부터 배포까지! 입문자도 할 수 있는 나만의 메신저 웹사이트 만들기
크리에이터 유노코딩 (강윤호)

나만의 웹사이트 만들기 클래스에 오신 것을 환영합니다!

1. 클래스를 소개합니다.
📌 클래스 주제 및 목표
- 웹 개발 기초 언어, HTML과 CSS를 이용해 메신저 앱 클론코딩하기!
- HTML과 CSS에 대한 숙련도를 향상시키는 것이 클래스의 주된 목표입니다.

📌 선수 지식 및 요구 사항
- HTML과 CSS를 공부해 본 경험이 있는 분들을 대상으로 진행되는 입문~초급 레벨의 클래스입니다.
- 웹브라우저를 통해 웹문서를 모니터링하고, 코드 에디터를 이용해 코드를 작성합니다. 웹브라우저는 크롬이나 파이어폭스 사용을 적극 권장하며, 코드 에디터는 함께 준비해 볼 예정입니다.

📌 진행 흐름
- 웰컴 챕터와 챕터 1에서는 HTML, CSS에 대한 간단한 요점 정리 및 클론 코딩을 위한 준비를 진행합니다.
- 챕터 2부터 챕터 4까지 메신저 웹사이트 클론코딩을 진행합니다.
- 챕터 5에서는 웹사이트 배포에 대해 알아봅니다.


2. 우리가 최종적으로 만들 프로젝트를 소개합니다.
📌 클론코딩이란 뭘까요?
- 실제 존재하는 웹사이트를 따라 만들면서 실력을 키우는 공부 방식입니다.
- 이 클래스에서는 인기 메신저 앱을 클론코딩해 우리만의 메신저 웹사이트 '코코넛톡'을 만들어 볼 거예요!
- 코코넛톡은 총 네 개의 화면으로 구성될 예정입니다. 로그인, 친구 목록, 채팅 목록, 그리고 채팅방까지.


3. Visual Studio Code 설치
📌 코드 에디터란
- 프로그램 소스 코드를 편집하기 위해 사용하는 소프트웨어입니다.
- 코드는 단지 메모장만 이용해도 작성할 수 있습니다. 그러나 코드 전용 에디터를 사용하면 코드 작성에 도움이 되는 여러 기능을 지원하므로 훨씬 편합니다.

📌 VSCode 설치하기
- https://code.visualstudio.com/
- VSCode가 이미 설치되어 있는 분이라면 곧장 다음 영상으로 넘어 가셔도 좋습니다.

📌 VSCode 사용법
- VSCode를 이용해 폴더에 접근하여 파일을 생성 및 삭제하고, 파일을 수정할 수 있습니다.


4. Visual Studio Code 확장 기능
📌 VSCode Extension
- Extension은 코드 작성을 위해 설치하는 확장 기능을 뜻합니다. VSCode 자체적으로 제공하는 다양한 Extension이 존재합니다.
- 우리 클래스에서는 세 가지 Extenstion을 사용해 볼 것입니다. Live Server, Auto rename tag, 그리고 indent-raindow.

📌 Extension 설치하는 방법
- VSCode의 메뉴 중 Extension을 선택하면, Extension을 검색 및 설치할 수 있습니다.


HTML & CSS 몸 풀기
1. HTML과 CSS
📌 HTML
- HTML은 HyperText Markup Language를 뜻합니다. HTML은 하이퍼텍스트 및 콘텐츠를 웹 문서에 표시하기 위해 사용하는 언어입니다.

📌 CSS
- CSS는 Cascading StyleSheets를 뜻합니다. 계단식 구조를 지닌 문서에 스타일을 더해주는 역할을 하는 언어입니다.
 
📌 HTML과 CSS
- HTML은 웹 콘텐츠를 만들고, CSS는 웹 콘텐츠를 스타일링합니다.
- 두 언어가 각각의 역할을 수행해 웹 문서를 완성하면, 웹 브라우저는 문서를 해석하여 화면에 표시하는 '렌더링'이라는 작업을 수행할 수 있습니다.

📌 HTML과 CSS 연결하기
- HTML 문서와 CSS 문서를 연결하기 위해서는 link 태그를 사용해야 합니다.
- link 태그의 href 속성은 연결하고자 하는 문서의 위치 및 명칭을 지정하는 속성입니다.
- link 태그의 rel 속성은 연결하려고 하는 문서(파일)가 어떤 목적으로 연결하는 문서인지를 명시해주기 위해 지정하는 속성입니다.


2. HTML주요 태그 및 속성
📌 태그
- HTML의 태그는 웹 콘텐츠를 표시하기 위해 사용하는 구문입니다.
- 태그의 이름인 태그명은 웹 콘텐츠에 성격과 의미를 부여합니다. 태그명에 따라 웹 콘텐츠의 기능이나 모양이 달라집니다.

📌 속성(attributes)
- HTML의 태그에는 속성을 선택적으로 추가하여 웹 콘텐츠의 부가기능을 정의할 수 있습니다.
- 속성은 시작 태그의 안쪽에 작성하며, 개수 제한은 없습니다. 작성 시에 공백으로 태그명과 각 속성을 구분합니다.
- 속성은 별다른 기호 없이 이름만 작성하고, 속성값은 따옴표를 이용해서 표시해 줍니다.

📌 div와 class
- div 태그는 여러 웹 콘텐츠를 포함할 때 사용하는 '컨테이너 태그'로 사용되곤 합니다.
- class 속성은 태그에 또 다른 이름을 부여할 수 있는 속성으로, div 태그에 class를 추가하여 역할을 강조할 수 있습니다.

📌 div와 class
- form 태그는 사용자로부터 입력받은 내용을 토대로 서버에 전송하거나 새로운 파일로 이동하기 위해 사용하는 태그입니다.
- form 태그 내부에는 다양한 입력 요소들을 포함해 사용자 입력을 받을 수 있습니다.
- form 태그의 action 속성은 form에서 데이터 입력을 마친 뒤에 진행할 단계를 담당하는 속성입니다. 파일명 또는 서버 주소 등이 지정될 수 있습니다.

📌 a 태그
- a 태그가 포함한 요소를 클릭하면, a 태그에 지정된 위치로 이동할 수 있습니다.
- a 태그의 href 속성에는 이동하고자 하는 위치를 지정합니다.


3. CSS 주요 속성 (1)
📌 CSS 기본 문법
- CSS의 스타일 선언은 선택자, 중괄호, 속성명, 그리고 속성값으로 구성됩니다. 속성명과 속성값은 원하는 만큼 선언할 수 있습니다.

📌 코코넛톡 스타일시트의 핵심
- 코코넛톡은 기존 앱에서 아이디어를 얻어 만드는 프로젝트이므로, 기존 앱의 레이아웃을 적절히 모방할 수 있어야 합니다. 따라서 레이아웃 관련 스타일이 아주 중요합니다.
- 이를 위해 우리 클래스에서는 CSS의 대표적인 속성, position과 display에 대해서 연습을 진행할 예정입니다.

📌 position 속성 연습하기
- position 속성은 문서 상에 요소를 배치하는 방법을 지정합니다.
- position 속성에 relative, absolute, fixed, sticky 등의 속성값을 지정하면 요소의 배치 방법이 결정되고, 이후 정확한 위치를
  지정하기 위해 top, bottom, right, left 속성을 사용해야 합니다.
- position 속성에 따로 값을 지정하지 않은 상태를 static이라 합니다. static 상태일 때의 요소는 문서의 일반적인 흐름에 따라 배치됩니다.
- relative 속성값은 요소를 일반적인 문서 흐름에 따라 배치하고, 자기 자신의 원래 위치를 기준으로 위치를 결정할 수 있게 합니다.
- absolute 속성값은 요소를 일반적인 문서 흐름에서 제외시키고, 가장 가까운 상위 position 요소를 기준으로 위치를 결정할 수 있게 합니다. position 요소란 static 상태가 아닌 요소를 뜻합니다.
- fixed 속성값은 요소를 일반적인 문서 흐름에서 제외시키고, 화면을 기준으로 위치를 결정할 수 있게 합니다. fixed 요소는 지정된 위치에서 고정되어 움직이지 않습니다.
- sticky 속성값은 요소를 일반적인 문서 흐름에 따라 배치하고, 가장 가까운 스크롤되는 상위 요소를 기준으로 위치를 고정시킵니다.

4. CSS 주요 속성 (2)
📌 position에 이어 display
- CSS의 display 속성은 요소를 블록 레벨과 인라인 레벨 중 어느 쪽으로 사용할지 여부와 자식 요소의 배치 방식을 결정하는데 사용하는 속성입니다.
- 블록 레벨이란 콘텐츠 영역 외 가로 축 너비를 모두 차지하는 것을, 인라인 레벨이란 콘텐츠 영역만을 차지하는 것을 뜻합니다.

📌 display 속성 연습하기
- display 속성은 요소의 레벨(블록, 인라인) 뿐 아니라 자식 요소의 배치 방식까지도 결정할 수 있는 속성이기 때문에 지정할 수 있는 속성값이 무척 다양합니다.
  여기에서는 inline, inline-block, block, 그리고 flex에 대해 알아봅니다.
- inline 속성값은 요소를 인라인 레벨로 유지합니다.
  인라인 레벨 요소는 너비와 높이, 즉 width와 height를 가지지 않고 오직 콘텐츠의 양에 따라 크기가 결정됩니다. span은 대표적인 인라인 레벨 요소입니다.
- inline-block 속성값은 요소의 배치는 인라인 레벨로 하지만, 블록 레벨의 요소처럼 width와 height를 지정할 수 있게 해줍니다. a 나 button 등이 이에 해당합니다.
- block 속성값은 요소의 배치를 블록 레벨로 유지합니다. div나 h1, p 등이 블록 레벨 요소입니다.

📌 flex 속성값을 이용한 배치
- flex 속성값은 요소 자신은 블록 레벨로 유지되지만, 자식 요소 배치에 대한 추가 속성을 제공하는 속성값입니다.
- flex 속성값이 지정된 요소를 '플렉스 박스'라 표현합니다. 플렉스 박스에는 주축과 교차축이라는 개념이 있는데, 기본 주축은 가로 방향, 교차축은 세로 방향입니다.
- flex-direction 은 플렉스 박스 주축의 방향을 결정할 수 있는 속성입니다.
- justify-content 는 주축에서의 요소 배치 방식을 결정할 수 있는 속성입니다.
- align-items 는 교차축에서의 요소 배치 방식을 결정할 수 있는 속성입니다.

5. 무료 아이콘 사용 방법
📌 폰트어썸(fontawesome) 아이콘 사용법에 대해 알아봅니다.

<script src="https://kit.fontawesome.com/193fb3b468.js" crossorigin="anonymous"></script>

<i class="fa-regular fa-smile chat-form__icon"></i>
<i class="fa-solid fa-paperclip chat-form__icon"></i>
<i class="fa-regular fa-calendar-check chat-form__icon"></i>

📌 아이콘 저장소 서비스 폰트어썸
- 아이콘이란 어떤 대상을 형상화한 이미지를 뜻합니다.
- 폰트어썸은 아이콘 저장소 서비스로써, 여기에서는 웹문서에서 사용할 벡터 아이콘을 얻을 수가 있습니다.
- 폰트어썸은 오픈소스 프로젝트이며, 무료 아이콘과 유료 아이콘이 모두 존재합니다.
- 폰트어썸 주소 : https://fontawesome.com/
- 폰트어썸을 사용하려면 회원가입 후 이메일 인증 절차를 거쳐야 하며, 회원에게 발급되는 킷코드(kit code)를 웹 문서에 추가해야 합니다.

📌 아이콘 표시하기
- 폰트어썸에서 발급받은 킷코드를 웹 문서에 추가하는 것이 먼저입니다.
- 킷코드는 <head> 태그의 안쪽 아무데나, 또는 <body> 태그 안쪽 맨 아래에 추가하는 것이 일반적입니다. 영상에서는 <head> 안쪽에 추가하였습니다.
- 킷코드를 추가한 상태에서, 사용하고자 하는 아이콘을 폰트어썸 사이트에서 검색합니다. 검색 시에는 아이콘과 관련있는 키워드를 입력해 검색합니다.
예를 들어 강아지 아이콘을 원한다면 dog나 puppy 등으로...
- 아이콘을 검색하면, 곧 검색 결과가 나타납니다.
색깔로 무료 아이콘과 유료 아이콘이 구분지어져 있습니다.
- 사용할 아이콘의 상세 페이지로 들어가면, 아이콘을 표시하기 위해 제공되는 <i>태그를 복사할 수 있습니다.
- 이를 복사하여 웹문서의 원하는 위치에 추가하면 됩니다.
- 복사한 <i> 태그의 시작 태그에 클래스를 추가하여 사이즈를 조절할 수 있습니다.

6. 메신저 웹사이트 코딩 준비하기
- 코코넛톡 웹 콘텐츠와 스타일시트 작성을 위해 필요한 기본적인 준비를 마친 폴더를 제공합니다. 이를 '코코넛톡 스타터 키트'라 부르겠습니다.
- 페이지 별로 HTML 문서를 미리 만들어 두고, 여기에 스타일을 가미할 CSS 문서들도 미리 만들어 두었습니다.
- CSS문서의 경우 정의할 스타일의 목적에 맞게 여러 파일로 분할하였습니다.
- img 폴더에는 코코넛 이미지가 포함되어 있는데, 로그인 페이지에 추가하기 위해 포함한 이미지입니다. 무료 이미지입니다.
- css 폴더에는 여러 개의 CSS문서가 구조를 갖추고 있습니다.

📌 css 폴더 살펴보기
- components 폴더에는 여러 페이지에서 재사용될 요소들에 대한 스타일들이 정의될 예정입니다.
- pages 폴더에는 각 페이지별 스타일들이 정의될 예정입니다.
- pages 폴더의 common.css는 이름에서 알 수 있듯 모든 페이지에 공통적으로 적용될 스타일시트 문서입니다.

📌파일별 확인
- common.css에는 웹 폰트 추가 및 크기 설정 등이 포함되어 있습니다. 이 파일은 더 이상 수정하지 않아도 됩니다.
- 웹 폰트는 저작권 걱정없이 사용할 수 있는 '나눔바른펜' 글꼴을 적용하였습니다.

📌 box-sizing을 border-box로 지정할 경우 width와 height에 안쪽 여백까지 포함되어 크기가 계산됩니다. 코코넛톡의 모든 요소는 이 방식을 기반으로 크기를 결정할 예정입니다.
- 각각의 HTML 문서에는 사용할 CSS 문서에 대한 연결이 이미 완료되어 있습니다.
- <link> 태그의 rel 속성을 "icon"으로 지정하면 이미지를 탭에 표시할 수 있습니다.

로그인 화면 만들기
1. 로그인 화면 레이아웃 구성하기
📌 index.html
- 관습적으로, 웹사이트의 홈 페이지(또는 메인 페이지)를 담당하는 문서의 이름은 index.html로 합니다.
- 코드 에디터에서 html 문서를 열고 마우스 오른쪽 버튼을 클릭하면 'open with live server' 메뉴를 선택할 수 있습니다.
- 이를 선택하면 live server가 실행되어 코드 변경 사항을 실시간 모니터링해가며 코딩을 진행할 수 있습니다.
- live server 기본 주소는 'localhost:5500/index.html'입니다.
- 주로 div 태그로 영역을 구분하고, 각 영역의 역할은 class 속성으로 표시해줍니다.

📌 엔티티 사용
- HTML 엔티티는 앰퍼샌드(&)로 시작하고 세미콜론(;)으로 끝나는 텍스트 조합을 의미합니다.
- 코드 내에서 특수성을 가지고 있는 문자, 즉 예약문자를 표시하거나, 키보드로 입력하기 어려운 특수문자를 표시하기 위해 사용합니다. 
- HTML 문서에서는 연달아 공백을 사용할 수 없습니다. 연달아 공백을 사용하기 위해서는 공백을 의미하는 엔티티 문자 &nbsp; 를 사용해야 합니다.

2. 채팅 사이트 로고 이미지 표시하기
📌 색상 지정하기
- background-color 속성에는 요소(영역)의 배경색을 지정할 수 있습니다.
- CSS에서 색상을 정의할 때는 색상 키워드, 16진수 색상 코드, rgb 함수, hsl 함수 등을 사용할 수 있습니다.
  코코넛톡에서는 주로 16진수 색상 코드를 사용합니다.
- 16진수 색상 코드는 여섯 개의 16진수 값을 이어 붙여 red, green, blue의 비율을 정의하는 방식의 색상 코드입니다.
  이 코드의 앞에는 기호 샵(#)이 접두어로 붙습니다. 값의 범위는 #000000 부터 #FFFFFF 까지 입니다.

📌 영역 가운데 배치하기
- display: flex; 는 자식 요소의 배치 방식을 정의하기 위한 속성입니다. 주축과 교차축을 기준으로 배치 방식을 결정할 수 있습니다.
- justify-content와 align-items를 함께 center로 지정하면 자식 요소들이 가운데에 위치하게 됩니다.
- min-height 속성을 지정하면, 요소의 높이가 지정된 크기보다 낮아지지 않습니다.

📌 배경 이미지 만들기
- background-image는 배경에 이미지를 표시할 수 있는 속성입니다. 여기에는 url() 을 사용해 원본 이미지를 링크해주는 방식으로 이미지를 지정할 수 있습니다.
  이미지는 기본적으로 원본 그대로 표시되므로, 크기를 수정하기 위해서는 부가적인 배경 관련 속성들을 활용해주어야 합니다.
- background-size는 배경 이미지의 크기를 지정할 수 있는 속성입니다. 크기는 x축과 y축 각각에 대해 지정할 수 있으므로,
  이 속성에는 두 개의 값을 공백으로 구분하여 지정할 수 있습니다. 하나의 값만 지정할 경우 x축 값이 우선 결정됩니다.
- background-repeat는 배경 이미지의 반복 여부를 결정합니다. 배경 이미지 원본이 요소의 크기보다 작을 경우, 이미지는 자동적으로 반복 표시됩니다.
  이것을 원치 않을 경우에는 이 속성을 no-repeat으로 지정해 문제를 해결할 수 있습니다.
- background-position은 배경 이미지의 위치를 지정할 수 있는 속성입니다. 키워드를 이용해 지정할 수도 있고, 수치를 이용해 정확한 위치를 지정할 수도 있습니다.
  키워드의 경우 top, bottom, right, left, center 등의 키워드를 사용할 수 있습니다.
- background 접두어가 붙는 모든 속성에 대한 정의는 background라는 단축 속성 하나에 여러 개의 속성값을 지정하는 방식으로 대체할 수 있습니다.
  이 경우 image-repeat-position/size 순서로 지정해주면 됩니다.

3. 로그인 폼 만들기 (1)
📌 폼 윤곽
- margin을 이용해 콘텐츠를 가운데에 배치할 수 있습니다.
- margin은 지정된 값의 개수에 따라 적용 방식이 달라집니다.
  예를 들면?
  margin: 0 은 요소의 상하좌우 모든 면에 0만큼 여백을 줍니다.
  margin: 0 2px 은 요소의 상하에 0만큼, 좌우에 2px만큼 여백을 줍니다.
- margin: 0 2px 4px 은 요소의 위에 0만큼, 좌우에 2px만큼, 아래에 4px만큼 여백을 줍니다.
- margin: 0 2px 4px 6px 은 요소의 위에 0만큼, 오른쪽 2px만큼, 아래에 4px만큼, 왼쪽에 6px만큼 여백을 줍니다.
- padding에도 같은 방식으로 값을 적용할 수 있습니다.
- margin에 auto를 사용하면 좌우 여백이 동일하게 맞춰집니다.

📌 스타일 덮어쓰기
- input 요소들에는 border나 border-radius 속성으로 인해 둥근 테두리가 그려져 상태입니다.
  그러나 개별 input 요소에 border와 border-radius를 따로 지정해 스타일 덮어쓰기를 할 수 있습니다.
- none 키워드는 주로 '사용하지 않겠다'라는 의미로 사용되는 스타일 키워드입니다.
- border-radius 역시 margin이나 padding처럼 여러 개의 값을 지정할 수 있는 속성입니다. 네 개의 값을 지정할 경우 각각 좌상단, 우상단, 우하단, 좌하단 순서로 각각 지정됩니다.

4. 로그인 폼 만들기 (2)
📌 의사클래스와 의사요소
- 의사클래스는 CSS 선택자에 추가하는 키워드입니다. 선택자 뒤에 콜론(:)으로 시작하는 키워드를 추가하여 선택자를 다양화할 수 있습니다.
- 의사클래스는 주로 요소가 특정한 상태가 되었을 때를 뜻합니다.
- 의사요소 또한 CSS 선택자에 추가하는 키워드입니다. 선택자 뒤에 더블 콜론(::)으로 시작하는 키워드를 추가하여 선택자를 다양화할 수 있습니다.
- 의사요소는 주로 요소의 특정 부분만을 선택하거나, 요소에 부가적인 요소를 추가하고자 할 때 사용할 수 있습니다.

📌 의사클래스 focus
- 입력 요소에 마우스를 얹고 입력을 준비하면 바깥쪽에 선이 나타나는 경우가 있습니다. 이를 outline이라 합니다. outline은 CSS로 제거할 수 있습니다.
- 입력 요소에 입력을 준비한 상태(커서가 움직이는 상태)를 focus 상태라 합니다. 이는 의사 클래스의 일종입니다.

📌 active
- 버튼을 마우스 커서로 꾹 누르고 있는 상태를 active라 합니다.
- active 또한 의사클래스의 일종입니다.

📌 의사요소 placeholder
- 입력 요소에는 입력할 내용을 알려주는 용도로 placeholder라는 것을 추가할 수 있습니다.
- 의사 요소 placeholder를 이용하면, 입력 요소의 placeholder 만을 위한 추가 스타일을 따로 지정할 수 있습니다.


친구 목록과 채팅 목록 만들기
1. 목록 레이아웃 구성하기
📌  친구 목록과 채팅 목록 살펴보기
- 친구 목록과 채팅 목록은 레이아웃이 유사합니다.
- 크게 세 가지 영역으로 구성되어 있는데, 각각은 네비게이션 바, 헤더, 목록입니다.
- 따라서 두 페이지의 마크업 또한 유사할 수밖에 없습니다. 연결한 스타일시트가 겹치는 이유가 여기에 있습니다.
- 마크업 진행 시에는 역시, class 속성을 이용한 요소의 아이덴티티에 집중해서 진행해 주세요.

2. 목록 만들기 (1)
📌 네비게이션 바 시작
- 네비게이션 바의 핵심은 화면의 왼편에 붙어서 고정된다는 것입니다. 이를 위해 영역의 position을 fixed로 설정합니다.
- position이 fixed인 요소는 문서의 배치 흐름에서 제외가 됩니다.
- 문서 배치 흐름이 서로 달라 요소끼리 겹치는 경우에, z-index 속성을 이용해서 상대적인 우선 순위를 결정할 수가 있습니다.

📌 first-child
- 의사 요소 first-child 를 사용하면 나란히 있는 형제 요소 중 첫 번째 요소만 콕 집어 선택할 수 있습니다.

📌 마크업에 따른 스타일 구별
- 현재 내가 있는 페이지에 대해 강조하고 싶다면, 메뉴의 일부 스타일을 변경하여 강조할 수 있습니다.
  active, current와 같은 이름으로 클래스를 특정 요소에만 추가하여 스타일을 추가 지정하는 기법이 주로 사용됩니다.
- 여기에서는 의사클래스로 not() 기능을 추가하였습니다. not() 은 괄호 안에 특정 조건을 추가하여 '특정 조건에 해당하지
  않는 요소만' 선택하도록 하는 의사 클래스입니다. 클래스가 active가 아닌 요소만 스타일을 다르게 만들어 주었습니다.

📌 헤더 만들기
- display: flex; 상태에서 justify-content 를 space-between으로 지정하면 내부 요소들이 양 끝으로 정렬됩니다.
- position: sticky; 는 추후 목록의 높이가 길어져 스크롤이 생겼을 때를 대비하기 위해 추가한 스타일입니다. 현 상태에서는 기능 확인 불가합니다.
- position이 fixed인 요소와 겹치는 부분에 margin을 주어 겹침 현상을 방지할 수 있습니다.

3. 목록 만들기 (2)
📌 유저리스트 시작
- display: flex; 요소에서 align-items는 교차축에서의 정렬 방식을 결정하는 속성입니다. 기본 주축은 가로, 기본 교차축은 세로임을 기억해주세요.
- .user 요소에는 position: relative; 를 추가하였습니다. 이는 추후 하위 요소 중 position: absolute; 요소를 추가해 해당 요소가 위치를 잡는 데 기준을 잡기 위함입니다.

📌 텍스트 오버플로우 처리하기
- 영역(요소)의 크기보다 텍스트가 많아지면 텍스트 오버플로우 현상이 발생합니다. 이때 넘치는 부분을 생략(...)처리 하는 방법이 있습니다.
- text-overflow: ellipsis; 는 넘치는 텍스트를 ... 처리한다는 의미의 속성입니다.
- 여기에 추가로 white-space: nowrap; 속성을 작성해주었습니다. 이는 연속 공백을 하나로 합치는 속성으로, 이렇게 해 주면 공백이 포함된 텍스트에 ellipsis가 적용됩니다.

4. 내 프로필과 친구 프로필 표시하기
📌 친구 목록 시작
- 친구 목록에는 내 프로필에 해당하는 컴포넌트가 구분지어져 있어야 합니다.
- 기존에 사용되고 있던 .user 요소에 클래스를 추가하여 (여기에서는 .my-profile) 세부 스타일을 추가합니다.

📌 친구가 여러 명일 때
- 친구가 많아지면, 영역의 높이가 길어지므로 스크롤이 발생합니다.
- 이때 position: sticky; 로 설정되어 있는 헤더는 스크롤 시에도 자기 자리를 지키게 됩니다.


5. 채팅 미리보기 만들기
📌 채팅 목록 시작
- 채팅 목록의 목록 컴포넌트 하나하나는 채팅 미리보기 차원에서 존재하는 컴포넌트입니다.
- 채팅 목록에서 목록 요소를 클릭하면 채팅방으로 이동할 수 있어야 합니다. 따라서 이를 <a> 태그로 묶고, chat.html 을 참조하도록 해야 합니다.
- 채팅 미리보기에는 마지막 메시지가 교환된 시간을 표시해주어야 하므로, 시간을 표시하는 태그를 추가했습니다.

📌 스타일시트 시작
- <a> 태그로 묶은 요소의 텍스트는 색상이 변경되고 밑줄이 그어지므로, color 속성과 text-decoration 속성을 이용하여 이를 수정해주었습니다.
- 채팅 미리보기에서 시간은 position: absolute; 속성을 활용해 위치를 지정해줍니다. 이때 기준이 필요한데, 기준은 .user 요소입니다(position: relative).


채팅방 만들기 & 마무리
1. 레이아웃 구성하기
📌  채팅방 시작
- 채팅방은 상태바, 채팅 내용, 채팅 입력 창 세 가지 요소로 구성됩니다.
- 채팅방도 예외없이 .container 요소를 만들고 그 안에 요소들을 포함시킵니다.
- 채팅 내용에서는 채팅 메시지 하나하나를 <li>로 마크업하기 위해 <ul>로 묶어줍니다.
- 입력 폼을 담당할 <form> 태그는 다른 두 요소와 구분되는데, 이는 추후 배치를 별도로 처리하기 위함입니다.

📌 form 다루기
- form태그의 action은 해당 폼에서 입력 데이터가 전송될 때의 목적지나 다음 행동을 지정하는 속성입니다.
- 우리 채팅방에서는 실제 동작을 추가하지 않을 것이므로, onsubmit 속성을 이용해 전송 버튼 클릭 시에 추가 동작이 일어나지 않도록 해 줍니다.
- onsubmit은 action 보다 먼저 처리되는 속성으로, 여기에 "return false;"를 지정해주면 전송 버튼 클릭시에 아무 일도 일어나지 않습니다.


2. 채팅방 상태 바 만들기
📌 채팅방 상태바 마크업 추가
- 채팅방 상태바에도 유저 리스트 컴포넌트가 재활용 됩니다.
- 채팅방 상태바는 유저 리스트의 형태를 소폭 수정한 컴포넌트 입니다. 소폭 수정을 위해서 .user 요소에 .chat-user 클래스를 추가해주었습니다.

📌 스타일시트 추가
- calc() 기능은 괄호 안의 계산 결과를 속성값으로 지정합니다.calc() 기능을 사용하지 않고 계산식 만을 속성값에 지정하게 되면, 계산 결과가 적용되지 않습니다.
- overflow: auto; 는 영역 안의 요소가 많아져서 높이가 길어질 시에 스크롤을 추가하겠다는 의도로 지정하는 속성입니다.


3. 채팅 입력 창 만들기
📌 입력 폼 스타일 시작
- 특별히 새로운 스타일 기법이 사용되진 않습니다.

📌 align-items
- align-items: center; 는 교차축의 길이(여기에선 높이)가 정의된 상태에서 유효한 스타일입니다. 길이를 알지 못하면 가운데가 어디인지 알 수 없습니다.


4. 말풍선 만들기
📌 말풍선 스타일 시작
- position을 relative로 지정해줍니다. 말풍선의 위치 이동과 동시에, 추후 의사 요소 위치의 기준을 잡기 위한 목적도 있습니다.
- 말풍선의 크기나 여백 등은 자유롭게 지정해주어도 됩니다.


📌다수의 말풍선이 처리되는 동작 확인
- 말풍선이 들어가는 영역(.chat-screen__comments)은 overflow: auto; 가 지정되어 있어 내부 길이가 길어지면 스크롤이 생성되어 
  스크롤 동작이 가능해집니다. 스크롤 동작 전에는 넘치는 만큼이 가려져 보이지 않습니다.
- 채팅 영역 상단의 상태바는 position: sticky; 이므로 스크롤 시에 위치가 고정됩니다.


📌 말풍선 꼬리 만들기
- after 의사 요소는 선택한 요소의 마지막에 요소를 추가할 수 있는 의사 요소 키워드입니다.
- after를 통해 만들어진 의사 요소는 content 속성과 짝지어져 사용되곤 하며, 여기에 추가 스타일을 부여할 수 있습니다.


5. 완성 그리고 미션
coconuttalk_complete.zip

📌 첫 화면, 로그인 페이지
- display: flex; 는 자식 요소의 배치 방법을 결정할 때 사용할 수 있는 속성입니다. 로그인 폼의 내부 요소들을 가운데 배치할 목적으로 사용했습니다.
- background 속성은 배경과 관련된 여러가지 하위 속성을 가지고 있습니다. 여기에서는 배경 이미지, 반복 여부, 위치, 크기 등을 따로 지정하기도 하고, 한꺼번에 지정해보기도 했습니다.

📌 목록 화면들
- 친구 목록과 채팅 목록은 네비게이션, 헤더, 목록 컴포넌트로 구성되어 있습니다.
- z-index는 요소 간의 겹침 현상이 있을 때, 무엇이 위에 있어야 할지를 상대적으로 결정하는 속성입니다. 숫자를 지정하면 됩니다.
- position 을 통한 요소 배치가 많이 사용되었습니다. 요소를 완전히 고정시키는 fixed, 요소를 스크롤시 접착시키는 sticky가 사용되었습니다.
- 의사 클래스 not()은 CSS가 제공하는 기능 중 하나로, 선택자 중 일부를 선택 대상에서 제외하는 데 사용할 수 있습니다.

📌 채팅방
- calc() 는 속성값 지정시 계산된 결과를 지정하기 위해 사용하는 기능입니다.
- after 의사 요소는 기존 선택된 요소의 끝에 요소를 추가하기 위해 사용하는 의사 요소입니다.

📌 코드 챌린지
- 몇 가지 도전 과제를 제시해 드릴테니, 선택해서 진행해보세요!


웹사이트 배포하기
1. 배포란? 배포 준비하기
📌 배포를 합시다
- 웹사이트를 배포(deploy)한다는 것은, 내가 만든 웹사이트를 다른 사람들도 볼 수 있도록 서비스한다는 의미입니다.

📌 인터넷을 통한 문서 공유
- 배포를 한다는 것은, 내가 만든 문서(웹사이트)에 다른 사람들이 접근할 수 있도록 만든다는 것입니다. 그러기 위해서는 인터넷 연결이 반드시 선행되어야 합니다.
- 인터넷을 통해 서로가 연결된 상태에서, 주소(URL)를 통해 상대방의 컴퓨터에 접근할 수 있습니다.


2. 무료 호스팅 서비스 이용하기
📌 배포를 합시다
- 웹 호스팅이란, 인터넷 상의 공간을 임대해주는 것입니다. 우리는 웹 호스팅 서비스를 제공받아 임대받은 공간에 웹문서를
  업로드하고, 그 주소를 공유하는 방식으로 배포를 진행할 수 있습니다.
- 개인 PC의 주소를 공유하는 배포 방식도 물론 가능하지만, 전원을 늘 켜둘 수 없는 문제나 보안상의 이유 때문에 웹 호스팅
  서비스를 이용하는 편이 안전하고 안정적입니다.

📌 네트리파이
- 웹 호스팅 서비스 네트리파이는 경량의 웹사이트를 무료로 호스팅할 수 있는 간편한 서비스입니다.
- 회원가입이 선행되어야 이 서비스를 이용할 수 있습니다.

https://dynamic-caramel-6c159c.netlify.app/
https://highcera.netlify.app/

📌 네트리파이 초간단 배포작업
- 네트라파이의 Sites 메뉴에서 점선 위에 웹문서 폴더를 올리면 해당 폴더가 배포됩니다. 이때 주소는 일단 임의로 할당됩니다.
- 폴더 안에는 index.html 문서가 존재해야 하는데, 이는 네트리파이를 통한 배포 시 index.html 문서가 웹사이트의 홈 화면이라는 약속이 존재하기 때문입니다.
- 문서 수정 후 재배포를 원할 때는 Sites 메뉴에서 deploy 메뉴로 들어가 점선 위에 폴더를 다시 올리면 됩니다. 
- 사이트 설정(Site details) 메뉴에서 주소를 변경할 수 있지만, 유료 도메인이 아닌 경우 netlify.app 은 주소에서 지울 수 없습니다.


완강을 축하합니다!
1. 학습한 내용 간단히 리뷰하기
📌 우리가 만든 것
- HTML, CSS 를 활용해 모바일 앱을 웹사이트로 모방해 보는 작업을 수행하였습니다.

📌코드 에디터
- 코딩 작업 위주로 진행된 클래스였기에, 코드 에디터는 이 클래스의 핵심 도구였습니다.
- 클래스에서 사용했던 Visual studio code 외에도 아톰, 브라켓, 서브라임 텍스트 등 다양한 코드 에디터가 시중에 많이 있으니 체험해보실 것을 추천합니다.

📌 레이아웃이 핵심
- 기존 서비스(웹, 앱)를 모방하는 데 있어 가장 핵심은 역시 레이아웃을 모방하는 일입니다.
- 레이아웃을 위한 기술의 핵심은 웹 콘텐츠를 배치하고, 정렬하는 것입니다. 이때 사용했던 CSS 스킬들을 꼭 본인의 것으로 만들어야 합니다.

📌 외부 소스 이용하기
- 내가 직접 구현한 HTML, CSS 코드 외에 다른 콘텐츠를 외부로부터 가져다 사용할 수도 있습니다. 우리 웹사이트에서는 폰트어썸의 아이콘을 적용하기도 했었습니다
- 웹사이트를 개발하기 위해 사용하는 외부 소스를 흔히 '라이브러리'라고 표현합니다.

📌 배포 작업
-  프로젝트의 마지막은 배포 작업이었습니다.
- 인터넷을 이용하는 사람 누구나 내 웹사이트를 볼 수 있도록 하기 위해, 웹 호스팅 서비스를 사용하는 경험을 해 보았습니다.
- 추후 다른 웹사이트를 만드실 때에도 배포 작업을 꼭 진행해보시기 바랍니다.


2. 완강을 축하합니다!
📌 다음에 할 것 추천
- 반응형 웹을 만들기 위한 기술을 학습해보세요. 가변 그리드, 미디어 쿼리, 애니메이션 관련 스킬 등.
- 코코넛톡과 비슷하거나 좀 더 높은 수준의 클론코딩을 개인적으로 진행해보시는 것도 추천합니다.
- 자바스크립트를 통해 웹사이트의 동작을 추가하는 것도 재미있을 거예요.

📌 자습용 웹사이트 및 공부 방법 추천
- MDN 과 W3Schools 는 모두 오픈소스 웹사이트로, 웹 개발 학습을 위한 자료가 방대한 웹사이트들입니다.
  https://developer.mozilla.org/en-US/ (https://developer.mozilla.org/ko/)
  https://www.w3schools.com/
- 책은 다양하게 보시는 것보다, 한 권을 사서 집중적으로 보시는 것이 좀 더 효율적입니다.
  수고하셨습니다.


v COCONUTTALK_COMPLETE
  v CSS
  v components
    # header.css
    # navbar.css
    # userlist.css
  v pages
    # chat.css
    # chats.css
    # common.css
    # friends.css
    # index.css
  v img
    coconut.png
<> chats.html
<> friends.html
<> index.html


[index.html]
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>코코넛톡 - 로그인</title>
  <link href="./css/pages/common.css" rel="stylesheet">
  <link href="./css/pages/index.css" rel="stylesheet">
  <link href="./img/coconut.png" rel="icon">
</head>
<body>
  <div class="container">
    <div class="login">
      <h1 class="login__logo"></h1>
      <h3 class="login__title">
        코코넛톡
      </h3>
      <form class="login__form" action="./friends.html">
        <input class="login__form__id" placeholder="코코넛계정">
        <input class="login__form__pw" placeholder="비밀번호">
        <input class="login__form__bt" type="submit" value="로그인">
      </form>
      <p class="login__account">
        코코넛 계정 찾기&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;비밀번호 재설정
      </p>
    </div>
  </div>
</body>
</html>

[friends.html]
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>코코넛톡 - 친구 목록</title>
  <link href="./css/pages/common.css" rel="stylesheet">
  <link href="./css/pages/friends.css" rel="stylesheet">
  <link href="./css/components/navbar.css" rel="stylesheet">
  <link href="./css/components/header.css" rel="stylesheet">
  <link href="./css/components/userlist.css" rel="stylesheet">
  <link href="./img/coconut.png" rel="icon">
  <script src="https://kit.fontawesome.com/c8e2b99a17.js" crossorigin="anonymous"></script>
</head>
<body>
  <div class="nav">
    <ul class="nav__list">
      <li class="nav__btn">
        <a href="friends.html" class="active"> 
          <i class="fas fa-user fa-2x"></i>
        </a>
      </li>
      <li class="nav__btn">
        <a href="chats.html">
          <i class="fas fa-comment fa-2x"></i>
        </a>
      </li>
    </ul>
  </div>

  <div class="container">

    <div class="header">
      <h3 class="header__title">친구</h3>
      <div class="header__menu">
        <span><i class="fas fa-search"></i></span>
        &nbsp;
        <span><i class="fas fa-user-plus"></i></span>
      </div>
    </div>

    <div class="main">
      <div class="user my-profile">
        <div class="user__column">
          <div class="user__pic"></div>
        </div>
        <div class="user__column">
          <p class="user__nick">강윤호</p>
          <p class="user__state">이것은 나의 프로필</p>
        </div>
      </div>
      <div class="friends__menu">
        <span class="friends__menu__header">친구 4</span>
      </div>
      <div class="user-list">
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
        <div class="user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구 또는 채팅방 이름</p>
            <p class="user__state">메시지 또는 상태</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
</html>

[chats.html]
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>코코넛톡 - 채팅 목록</title>
  <link href="./css/pages/common.css" rel="stylesheet">
  <link href="./css/pages/chats.css" rel="stylesheet">
  <link href="./css/components/navbar.css" rel="stylesheet">
  <link href="./css/components/header.css" rel="stylesheet">
  <link href="./css/components/userlist.css" rel="stylesheet">
  <link href="./img/coconut.png" rel="icon">
  <script src="https://kit.fontawesome.com/c8e2b99a17.js" crossorigin="anonymous"></script>
</head>
<body>
  <div class="nav">
    <ul class="nav__list">
      <li class="nav__btn">
        <a href="friends.html">
          <i class="fas fa-user fa-2x"></i>
        </a>
      </li>
      <li class="nav__btn">
        <a href="chats.html" class="active">
          <i class="fas fa-comment fa-2x"></i>
        </a>
      </li>
    </ul>
  </div> 

  <div class="container">

    <div class="header">
      <h3 class="header__title">채팅</h3>
      <div class="header__menu">
        <span><i class="fas fa-search"></i></span>
        &nbsp;
        <span><i class="fas fa-user-plus"></i></span>
      </div>
    </div>

    <div class="main">
      <div class="user-list">
        <a href="chat.html">
          <div class="user">
            <div class="user__column">
              <div class="user__pic"></div>
            </div>
            <div class="user__column">
              <p class="user__nick">채팅방</p>
              <p class="user__state">안녕 이건 마지막 메시지야</p>
              <p class="user__time">14:00</p>
            </div>
          </div>
        </a>
        <a href="chat.html">
          <div class="user">
            <div class="user__column">
              <div class="user__pic"></div>
            </div>
            <div class="user__column">
              <p class="user__nick">채팅방</p>
              <p class="user__state">안녕 이건 마지막 메시지야</p>
              <p class="user__time">14:00</p>
            </div>
          </div>
        </a>
        <a href="chat.html">
          <div class="user">
            <div class="user__column">
              <div class="user__pic"></div>
            </div>
            <div class="user__column">
              <p class="user__nick">채팅방</p>
              <p class="user__state">안녕 이건 마지막 메시지야</p>
              <p class="user__time">14:00</p>
            </div>
          </div>
        </a>
        <a href="chat.html">
          <div class="user">
            <div class="user__column">
              <div class="user__pic"></div>
            </div>
            <div class="user__column">
              <p class="user__nick">채팅방</p>
              <p class="user__state">안녕 이건 마지막 메시지야</p>
              <p class="user__time">14:00</p>
            </div>
          </div>
        </a>
        <a href="chat.html">
          <div class="user">
            <div class="user__column">
              <div class="user__pic"></div>
            </div>
            <div class="user__column">
              <p class="user__nick">채팅방</p>
              <p class="user__state">안녕 이건 마지막 메시지야</p>
              <p class="user__time">14:00</p>
            </div>
          </div>
        </a>
        <a href="chat.html">
          <div class="user">
            <div class="user__column">
              <div class="user__pic"></div>
            </div>
            <div class="user__column">
              <p class="user__nick">채팅방</p>
              <p class="user__state">안녕 이건 마지막 메시지야</p>
              <p class="user__time">14:00</p>
            </div>
          </div>
        </a>
        <a href="chat.html">
          <div class="user">
            <div class="user__column">
              <div class="user__pic"></div>
            </div>
            <div class="user__column">
              <p class="user__nick">채팅방</p>
              <p class="user__state">안녕 이건 마지막 메시지야</p>
              <p class="user__time">14:00</p>
            </div>
          </div>
        </a>
      </div>
    </div>
  </div>
</body>
</html>

[chat.html]
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>코코넛톡 - 채팅</title>
  <link href="./css/pages/common.css" rel="stylesheet">
  <link href="./css/pages/chat.css" rel="stylesheet">
  <link href="./css/components/userlist.css" rel="stylesheet">
  <link href="./img/coconut.png" rel="icon">
  <script src="https://kit.fontawesome.com/c8e2b99a17.js" crossorigin="anonymous"></script>
</head>
<body>
  <div class="container">
    <div class="chat-screen">
      <div class="chat-screen__bar">
        <div class="user chat-user">
          <div class="user__column">
            <div class="user__pic"></div>
          </div>
          <div class="user__column">
            <p class="user__nick">친구명</p>
            <p class="user__state">
              <i class="fas fa-user"></i> 2
            </p>
          </div>
        </div>
      </div>
      <ul class="chat-screen__comments">
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
        <li class="comment">내용은 아무거나</li>
      </ul>
    </div>
    <form class="chat-form" onsubmit="return false;">
      <div class="chat-form__plugin">
        <i class="far fa-smile chat-form__icon"></i>
        <i class="fas fa-paperclip chat-form__icon"></i>
        <i class="far fa-calendar-check chat-form__icon"></i>        
      </div>
      <div class="chat-form__field">
        <textarea class="chat-form__msg"></textarea>
        <input class="chat-form__bt" type="submit" value="전송">
      </div>
    </form>
  </div>
</body>
</html>

CSS>components
[navbar.css]
.nav{
  position: fixed;
  top: 0;
  left: 0;
  width: 70px;
  height: 100%;
  background-color: #f1f1f1;
  z-index: 2;
}
.nav__list{
  margin: 0;
  padding: 0;
  list-style-type: none;
}
.nav__list .nav__btn:first-child{
  margin-top: 50px;
}
.nav__list .nav__btn a{
  display: block;
  padding: 16px 0;
  color: #000000;
  text-align: center;
  text-decoration: none;
}
.nav__list .nav__btn a:not(.active){
  color: #bdbdbd;
}
.nav__list .nav__btn a:not(.active):hover{
  color: #555555;
}

[header.css]
.header{
  display: flex;
  justify-content: space-between;
  position: sticky;
  top: 0;
  z-index: 1;
  padding: 12px;
  background-color: #ffffff;
  line-height: 36px;
}
.header__title{
  margin: 0;
  font-size: 1em;
}
.header__menu span{
  display: inline-block;
  width: 36px;
  height: 36px;
  border-radius: 18px;
  text-align: center;
}
.header__menu span:hover{
  background-color: #eaeaea; 
}

[userlist.css]
.user{
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding: 16px;
  position: relative;
}
.user:hover{
  background-color: #f2f2f2;
}
.user__pic:not(.my-profile .user__pic){
  width: 50px;
  height: 50px;
  background-color: #c68a65;
  border-radius: 18px;
  margin-right: 10px;
}
.user__nick{
  margin: 5px;
  font-size: 0.9em;
}
.user__state{
  margin: 5px;
  font-size: 0.8em;
  color: #aeaeae;
  overflow: hidden;
  width: 50vw;
  text-overflow: ellipsis;
  white-space: nowrap;
}


CSS>pages
[common]
@font-face {
  font-family: 'NanumBarunpen';
  src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_two@1.0/NanumBarunpen.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

*{
  font-family: 'NanumBarunpen';
  box-sizing: border-box;
}

html{
  height: 100%;
}

body{
  height: 100%;
  min-width: 300px;
  margin: 0;
}

[index.css]
.container{
  width: 100%;
  height: 100%;
  background-color: #9ec4cf;
}

.login{
  display: flex;
  flex-direction: column;
  justify-content: center;
  height: 100%;
  text-align: center;
  min-height: 460px;
}
.login .login__logo{
  height: 90px;
  background: url(../../img/coconut.png)
  no-repeat center / auto 100%;
  /* background-image: url(../../img/coconut.png);
  background-size: auto 100%;
  background-repeat: no-repeat;
  background-position: center; */
}
.login .login__account{
  font-size: 0.9em;
  color: #6b4732;
}

.login .login__form{
  width: 240px;
  margin: 0 auto 80px;
}
.login .login__form input{
  width: 240px;
  height: 40px;
  border: 1px solid #bdbdbd;
  border-radius: 5px;
  font-size: 0.9em;
}
.login .login__form input:focus{
  outline: none;
}
.login .login__form input::placeholder{
  color: #bdbdbd;
}
.login .login__form .login__form__id{
  padding: 3px 10px;
  border-bottom: none;
  border-radius: 5px 5px 0 0;
}
.login .login__form .login__form__pw{
  padding: 3px 10px;
  border-top: none;
  border-radius: 0 0 5px 5px;
}
.login .login__form .login__form__bt{
  color: #ffffff;
  background-color: #6b4732; 
  margin-top: 6px;
  border: 1px solid #bdbdbd;
  cursor: pointer;
}
.login .login__form .login__form__bt:active{
  background-color: #bf7d57; 
}

[friends.css]
.container{
  margin-left: 70px;
}
.my-profile .user__pic{
  width: 60px;
  height: 60px;
  background-color: #edcae1;
  border-radius: 20px;
  margin-right: 10px;
}
.friends__menu{
  font-size: 0.8em;
  margin: 10px 15px;
  border-top: 1px solid #aeaeae;
  padding-top: 15px;
}
.friends__menu__header{
  color: #aeaeae;
}

[chats.css]
.container{
  margin-left: 70px;
}
.user-list a{
  text-decoration: none;
  color: #000000;
}
.user__time{
  position: absolute;
  top: 10px;
  right: 16px;
  font-size: 0.8em;
  color: #aeaeae;
}

[chat.css]
.container{
  width: 100%;
  height: 100%;
  background-color: #d2daf1;
}

.chat-screen{
  height: calc(100% - 160px);
  overflow: auto; /* 내용이 넘치면 스크롤 추가 */
}
.chat-screen .chat-screen__bar{
  position: sticky;
  top: 0;
  z-index: 1;
  height: 100px;
}

.chat-user{
  background-color: #f2f2f2;
}

.chat-form{
  height: 160px;
  background-color: #ffffff;
}
.chat-form__plugin{
  height: 40px;
  background-color: #f2f2f2;
}
.chat-form__plugin .chat-form__icon{
  margin: 0 0 0 15px;
  line-height: 40px;
}
.chat-form .chat-form__field{
  display: flex;
  justify-content: space-around;
  align-items: center;
  height: 120px;
  font-size: 1em;
}
.chat-form .chat-form__msg{
  width: calc(100% - 120px);
  height: 100px;
  padding: 10px;
  border: none;
  resize: none;
}
.chat-form .chat-form__msg:focus{
  outline: none;
}
.chat-form .chat-form__bt{
  width: 120px;
  height: 100px;
  background-color: #9ec4cf;
  border-radius: 8px;
}
.chat-form .chat-form__bt:active{
  background-color: #a1bec7;
}

/* 말풍선 스타일 */
.comment{
  position: relative;
  left: 20px;
  width: 280px;
  height: 50px;
  list-style-type: none;
  background-color: #9ec4cf;
  padding: 10px;
  margin: 0 0 10px 0;
  border-radius: 10px;
  line-height: 30px;
}
.comment::after{
  content: "";
  position: absolute;
  top: 10px;
  left: -10px;
  border-right: 16px solid #9ec4cf;
  border-bottom: 16px solid transparent;
}
